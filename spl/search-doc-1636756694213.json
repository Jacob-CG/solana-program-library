[{"title":"Token-Lending Program","type":0,"sectionRef":"#","url":"token-lending","content":"","keywords":""},{"title":"On-Chain Programs‚Äã","type":1,"pageTitle":"Token-Lending Program","url":"token-lending#on-chain-programs","content":"Cluster\tProgram AddressMainnet Beta\tLendZqTs8gn5CTSJU1jWKhKuVpjJGom45nnwPb2AMTi Testnet\tLendZqTs8gn5CTSJU1jWKhKuVpjJGom45nnwPb2AMTi Devnet\tLendZqTs8gn5CTSJU1jWKhKuVpjJGom45nnwPb2AMTi "},{"title":"Shared memory Program","type":0,"sectionRef":"#","url":"shared-memory","content":"","keywords":""},{"title":"Background‚Äã","type":1,"pageTitle":"Shared memory Program","url":"shared-memory#background","content":"Solana's programming model and the definitions of the Solana terms used in this document are available at: https://docs.solana.com/appshttps://docs.solana.com/terminology "},{"title":"Source‚Äã","type":1,"pageTitle":"Shared memory Program","url":"shared-memory#source","content":"The Shared memory Program's source is available ongithub "},{"title":"Interface‚Äã","type":1,"pageTitle":"Shared memory Program","url":"shared-memory#interface","content":"The Shared memory program expects one account and writes instruction data into the account's data. The first 8 bytes of the instruction data contain the little-endian offset into the account data. The rest of the instruction data is written into the account data starting at that offset. "},{"title":"Operational overview‚Äã","type":1,"pageTitle":"Shared memory Program","url":"shared-memory#operational-overview","content":"This program is useful for returning data from cross-program invoked programs to the invoker. Because the account does not need to be signed it is not reliable to use this program to pass data between programs from different transactions. "},{"title":"Memo Program","type":0,"sectionRef":"#","url":"memo","content":"","keywords":""},{"title":"Background‚Äã","type":1,"pageTitle":"Memo Program","url":"memo#background","content":"Solana's programming model and the definitions of the Solana terms used in this document are available at: https://docs.solana.com/appshttps://docs.solana.com/terminology "},{"title":"Source‚Äã","type":1,"pageTitle":"Memo Program","url":"memo#source","content":"The Memo Program's source is available ongithub "},{"title":"Interface‚Äã","type":1,"pageTitle":"Memo Program","url":"memo#interface","content":"The on-chain Memo Program is written in Rust and available on crates.io asspl-memo anddocs.rs. The crate provides a build_memo() method to easily create a properly constructed Instruction. "},{"title":"Operational Notes‚Äã","type":1,"pageTitle":"Memo Program","url":"memo#operational-notes","content":"If zero accounts are provided to the signed-memo instruction, the program succeeds when the memo is valid UTF-8, and logs the memo to the transaction log. If one or more accounts are provided to the signed-memo instruction, all must be valid signers of the transaction for the instruction to succeed. "},{"title":"Logs‚Äã","type":1,"pageTitle":"Memo Program","url":"memo#logs","content":"This section details expected log output for memo instructions. Logging begins with entry into the program:Program MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr invoke [1] The program will include a separate log for each verified signer:Program log: Signed by &lt;BASE_58_ADDRESS&gt; Then the program logs the memo length and UTF-8 text:Program log: Memo (len 4): &quot;üêÜ&quot; If UTF-8 parsing fails, the program will log the failure point:Program log: Invalid UTF-8, from byte 4 Logging ends with the status of the instruction, one of:Program MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr successProgram MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr failed: missing required signature for instructionProgram MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr failed: invalid instruction data For more information about exposing program logs on a node, head to thedeveloper docs "},{"title":"Compute Limits‚Äã","type":1,"pageTitle":"Memo Program","url":"memo#compute-limits","content":"Like all programs, the Memo Program is subject to the cluster's compute budget. In Memo, compute is used for parsing UTF-8, verifying signers, and logging, limiting the memo length and number of signers that can be processed successfully in a single instruction. The longer or more complex the UTF-8 memo, the fewer signers can be supported, and vice versa. As of v1.5.1, an unsigned instruction can support single-byte UTF-8 of up to 566 bytes. An instruction with a simple memo of 32 bytes can support up to 12 signers. "},{"title":"Token Swap Program","type":0,"sectionRef":"#","url":"token-swap","content":"","keywords":""},{"title":"Overview‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#overview","content":"The Token Swap Program allows simple trading of token pairs without a centralized limit order book. The program uses a mathematical formula called &quot;curve&quot; to calculate the price of all trades. Curves aim to mimic normal market dynamics: for example, as traders buy a lot of one token type, the value of the other token type goes up. Depositors in the pool provide liquidity for the token pair. That liquidity enables trade execution at spot price. In exchange for their liquidity, depositors receive pool tokens, representing their fractional ownership in the pool. During each trade, a program withholds a portion of the input token as a fee. That fee increases the value of pool tokens by being stored in the pool. This program was heavily inspired by Uniswap andBalancer. More information is available in their excellent documentation and whitepapers. "},{"title":"Background‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#background","content":"Solana's programming model and the definitions of the Solana terms used in this document are available at: https://docs.solana.com/appshttps://docs.solana.com/terminology "},{"title":"Source‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#source","content":"The Token Swap Program's source is available ongithub. "},{"title":"Interface‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#interface","content":"JavaScript bindingsare available that support loading the Token Swap Program on to a chain and issuing instructions. Example user interface built and maintained by Serum team is availablehere "},{"title":"Operational overview‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#operational-overview","content":"The following explains the instructions available in the Token Swap Program. Note that each instruction has a simple code example that can be found in theend-to-end tests. "},{"title":"Creating a new token swap pool‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#creating-a-new-token-swap-pool","content":"The creation of a pool showcases the account, instruction, and authorization models on Solana, which can be very different compared to other blockchains. Initialization of a pool between two token types, which we'll call &quot;A&quot; and &quot;B&quot; for simplicity, requires the following accounts: empty pool state accountpool authoritytoken A accounttoken B accountpool token mintpool token fee accountpool token recipient accounttoken program The pool state account simply needs to be created usingsystem_instruction::create_account with the correct size and enough lamports to be rent-free. The pool authority is aprogram derived addressthat can &quot;sign&quot; instructions towards other programs. This is required for the Token Swap Program to mint pool tokens and transfer tokens from its token A and B accounts. The token A / B accounts, pool token mint, and pool token accounts must all be created (using system_instruction::create_account) and initialized (usingspl_token::instruction::initialize_mint orspl_token::instruction::initialize_account). The token A and B accounts must be funded with tokens, and their owner set to the swap authority, and the mint must also be owned by the swap authority. Once all of these accounts are created, the Token Swap initialize instruction will properly set everything up and allow for immediate trading. Note that the pool state account is not required to be a signer on initialize, so it's important to perform the initialize instruction in the same transaction as its system_instruction::create_account. "},{"title":"Swapping‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#swapping","content":"Once a pool is created, users can immediately begin trading on it using the swap instruction. The swap instruction transfers tokens from a user's source account into the swap's source token account, and then transfers tokens from its destination token account into the user's destination token account. Since Solana programs require all accounts to be declared in the instruction, users need to gather all account information from the pool state account: the token A and B accounts, pool token mint, and fee account. Additionally, the user must allow for tokens to be transferred from their source token account. The best practice is to spl_token::instruction::approve a precise amount to a new throwaway Keypair, and then have that new Keypair sign the swap transaction. This limits the amount of tokens that can be taken from the user's account by the program. "},{"title":"Depositing liquidity‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#depositing-liquidity","content":"To allow any trading, the pool needs liquidity provided from the outside. Using the deposit_all_token_types ordeposit_single_token_type_exact_amount_in instructions, anyone can provide liquidity for others to trade, and in exchange, depositors receive a pool token representing fractional ownership of all A and B tokens in the pool. Additionally, the user will need to approve a delegate to transfer tokens from their A and B token accounts. This limits the amount of tokens that can be taken from the user's account by the program. "},{"title":"Withdrawing liquidity‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#withdrawing-liquidity","content":"At any time, pool token holders may redeem their pool tokens in exchange for tokens A and B, returned at the current &quot;fair&quot; rate as determined by the curve. In the withdraw_all_token_types andwithdraw_single_token_type_exact_amount_out instructions, pool tokens are burned, and tokens A and B are transferred into the user's accounts. Additionally, the user will need to approve a delegate to transfer tokens from their pool token account. This limits the amount of tokens that can be taken from the user's account by the program. "},{"title":"Curves‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#curves","content":"The Token Swap Program is completely customizable for any possible trading curve that implements theCurveCalculatortrait. If you would like to implement a new automated market maker, it may be as easy as forking the Token Swap Program and implementing a new curve. The following curves are all provided out of the box for reference. "},{"title":"Constant product‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#constant-product","content":"The constant product curveis the well-known Uniswap and Balancer style curve that preserves an invariant on all swaps, expressed as the product of the quantity of token A and token B in the swap. A_total * B_total = invariant Copy If a trader wishes to put in token A for some amount of token B, the calculation for token B becomes: (A_total + A_in) * (B_total - B_out) = invariant Copy For example, if the swap has 100 token A and 5,000 token B, and a trader wishes to put in 10 token A, we can solve for the invariant and then B_out: A_total * B_total = 100 * 5,000 = 500,000 = invariant Copy And (A_total + A_in) * (B_total - B_out) = invariant (100 + 10) * (5,000 - B_out) = 500,000 5,000 - B_out = 500,000 / 110 5,000 - (500,000 / 110) = B_out B_out = 454.5454... Copy More information can be found on the Uniswap whitepaper and the Balancer whitepaper. "},{"title":"Constant price‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#constant-price","content":"The constant price curveis a simple curve that always maintains the price of token A with respect to token B. At initialization, the swap creator sets the cost for 1 token B in terms of token A. For example, if the price is set to 17, 17 token A will always be required to receive 1 token B, and 1 token B will always be required to receive 17 token A. Note that this curve does not follow traditional market dynamics, since the price is always the same. Constant price curves are most useful for fixed offerings of new tokens that explicitly should not have market dynamics. For example, a decentralized game creator wants to sell new &quot;SOLGAME&quot; tokens to be used in their game, so they create a constant price swap of 2 USDC per SOLGAME, and supply all of the SOLGAME tokens at swap creation. Users can go to the swap and purchase all of the tokens they want and not worry about the market making SOLGAME tokens too expensive. "},{"title":"Stable (under construction)‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#stable-under-construction","content":"The stable curvefrom curve.fi, has a different shape to prioritize &quot;stable&quot; trading, meaning prices that stay constant through trading. Most importantly, prices don't change as quickly as the constant product curve, so a stable swap between two coins that represent the same value should be as close to 1:1 as possible. For example, stablecoins that represent a value in USD (USDC, TUSD, USDT, DAI), should not have big price discrepancies due to the amount of tokens in the swap. The curve mirrors the dynamics of the curve More information can be found on their whitepaper. The Token Swap Program implementation of the stable curve is under construction, and a more complete version can be found at thestable-swap-program. "},{"title":"Offset‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#offset","content":"The offset curvecan be seen as a combination of the constant price and constant product curve. It follows the constant product curve dynamics, but allows for the pool creator to set an &quot;offset&quot; on one side. The invariant for the curve is: (A_total) * (B_total + B_offset) = invariant Copy This is useful for initial token offerings, where the token creator wants to sell some new token as a swap without putting up the capital to fund the other side of the swap. This is similar to the constant price curve, but the key difference is that the offset curve captures normal market dynamics, in that the offered token price will increase as it is bought. For example, a decentralized betting application creator wants to sell new &quot;SOLBET&quot; tokens on the market in exchange for USDC, and they believe each token is worth at least 4 USDC. They create a pool between SOLBET and USDC, funding one side with 1,000 SOLBET, and the other side with 0 USDC, but an offset of 4,000 USDC. If a trader tries to buy SOLBET with 40 USDC, the invariant is calculated with the offset: (SOLBET_total) * (USDC_total + USDC_offset) = invariant 1,000 * (0 + 4,000) = 4,000,000 (SOLBET_total - SOLBET_out) * (USDC_total + USDC_offset + USDC_in) = invariant SOLBET_out = 9.901 Copy The trader received 9.901 SOLBET for 40 USDC, so the price per SOLBET was roughly 4.04, slightly higher than the minimum of 4 USDC per SOLBET. Conversely, if a trader tries to buy USDC with SOLBET immediately after creation, it will fail because there is no USDC actually present in the pool. "},{"title":"Testing‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#testing","content":"The token-swap program is tested using various strategies, including unit tests, integration tests, property tests, and fuzzing. Since unit tests and integration tests are well-known, we highlight property tests and fuzzing here. "},{"title":"Property testing‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#property-testing","content":"Using the proptestcrate, we test specific mathematical properties of curves, specifically to avoid leaking value on any trades, deposits, or withdrawals. It is out of scope of this document to explain property testing, but the specific property tests for the Token Swap Program can be found in thecurvesandmathportions of the repo. "},{"title":"Fuzzing‚Äã","type":1,"pageTitle":"Token Swap Program","url":"token-swap#fuzzing","content":"Using honggfuzz, we regularly test all possible inputs to the Token Swap Program, ensuring that the program does not crash unexpectedly or leak tokens. It is out of scope of this document to explain fuzzing, but the specific implementation for the program can be found in the instruction fuzz testsof the repo. "},{"title":"Feature Proposal Program","type":0,"sectionRef":"#","url":"feature-proposal","content":"","keywords":""},{"title":"Background‚Äã","type":1,"pageTitle":"Feature Proposal Program","url":"feature-proposal#background","content":"The Solana validator software supports runtime feature activation through the built-in Feature program. This program ensures that features are activated simultaneously across all validators to avoid divergent behavior that would cause hard forks or otherwise break consensus. Thefeatureand feature_setRust modules are the primitives for this facility, and the solana featurecommand-line subcommands allow for easy feature status inspection and feature activation. The solana feature activate workflow was designed for use by the core Solana developers to allow for low-overhead addition of non-controversial network features over time. The Feature Proposal Program provides an additional mechanism over these runtime feature activation primitives to permit feature activation by community vote when appropriate. "},{"title":"Source‚Äã","type":1,"pageTitle":"Feature Proposal Program","url":"feature-proposal#source","content":"The Feature Proposal Program's source is available ongithub "},{"title":"Interface‚Äã","type":1,"pageTitle":"Feature Proposal Program","url":"feature-proposal#interface","content":"The Feature Proposal Program is written in Rust and available on crates.io and docs.rs. "},{"title":"Command-line Utility‚Äã","type":1,"pageTitle":"Feature Proposal Program","url":"feature-proposal#command-line-utility","content":"The spl-feature-proposal command-line utility can be used to manage feature proposal. Once you have Rust installed, run: $ cargo install spl-feature-proposal-cli Copy Run spl-feature-proposal --help for a full description of available commands. "},{"title":"Configuration‚Äã","type":1,"pageTitle":"Feature Proposal Program","url":"feature-proposal#configuration","content":"The spl-feature-proposal configuration is shared with the solana command-line tool. "},{"title":"Feature Proposal Life Cycle‚Äã","type":1,"pageTitle":"Feature Proposal Program","url":"feature-proposal#feature-proposal-life-cycle","content":"This section describes the life cycle of a feature proposal. "},{"title":"Implement the Feature‚Äã","type":1,"pageTitle":"Feature Proposal Program","url":"feature-proposal#implement-the-feature","content":"The first step is to conceive of the new feature and realize it in the Solana code base, working with the core Solana developers at https://github.com/solana-labs/solana. During the implementation, a feature id will be required to identity the new feature in the code base to avoid the new functionality until its activation. The feature id for a feature proposal is derived by running the following commands. First create a keypair for the proposal: $ solana-keygen new --outfile feature-proposal.json --silent --no-passphrase Wrote new keypair to feature-proposal.json Copy Now run the spl-feature-proposal program to derive the feature id: $ spl-feature-proposal address feature-proposal.json Feature Id: HQ3baDfNU7WKCyWvtMYZmi51YPs7vhSiLn1ESYp3jhiA Token Mint Address: ALvA7Lv9jbo8JFhxqnRpjWWuR3aD12uCb5KBJst4uc3d Acceptance Token Address: AdqKm3mSJf8AtTWjfpA5ZbJszWQPcwyLA2XkRyLbf3Di Copy which in this case is HQ3baDfNU7WKCyWvtMYZmi51YPs7vhSiLn1ESYp3jhiA. HQ3baDfNU7WKCyWvtMYZmi51YPs7vhSiLn1ESYp3jhiA is the identifier that will be used in the code base and eventually will be visible in the solana feature status command. Note however that it is not possible to use solana feature activate to activate this feature, as there is no private key forHQ3baDfNU7WKCyWvtMYZmi51YPs7vhSiLn1ESYp3jhiA. Activation of this feature is only possible by the Feature Proposal Program. "},{"title":"Initiate the Feature Proposal‚Äã","type":1,"pageTitle":"Feature Proposal Program","url":"feature-proposal#initiate-the-feature-proposal","content":"After the feature is implemented and deployed to the Solana cluster, the feature id will be visible in solana feature status and the feature proposer may initiate the community proposal process. This is done by running: $ spl-feature-proposal propose feature-proposal.json Feature Id: HQ3baDfNU7WKCyWvtMYZmi51YPs7vhSiLn1ESYp3jhiA Token Mint Address: ALvA7Lv9jbo8JFhxqnRpjWWuR3aD12uCb5KBJst4uc3d Distributor Token Address: GK55hNft4TGc3Hg4KzbjEmju8VfaNuXK8jQNDTZKcsNF Acceptance Token Address: AdqKm3mSJf8AtTWjfpA5ZbJszWQPcwyLA2XkRyLbf3Di Number of validators: 376 Tokens to be minted: 134575791.53064314 Tokens required for acceptance: 90165780.3255309 (67%) Token distribution file: feature-proposal.csv JSON RPC URL: http://api.mainnet-beta.solana.com Distribute the proposal tokens to all validators by running: $ solana-tokens distribute-spl-tokens --from GK55hNft4TGc3Hg4KzbjEmju8VfaNuXK8jQNDTZKcsNF --input-csv feature-proposal.csv --db-path db.8CyUVvio --fee-payer ~/.config/solana/id.json --owner &lt;FEATURE_PROPOSAL_KEYPAIR&gt; $ solana-tokens spl-token-balances --mint ALvA7Lv9jbo8JFhxqnRpjWWuR3aD12uCb5KBJst4uc3d --input-csv feature-proposal.csv Once the distribution is complete, request validators vote for the proposal. To vote, validators should first look up their token account address: $ spl-token --owner ~/validator-keypair.json accounts ALvA7Lv9jbo8JFhxqnRpjWWuR3aD12uCb5KBJst4uc3d and then submit their vote by running: $ spl-token --owner ~/validator-keypair.json transfer &lt;TOKEN_ACCOUNT_ADDRESS&gt; ALL AdqKm3mSJf8AtTWjfpA5ZbJszWQPcwyLA2XkRyLbf3Di Periodically the votes must be tallied by running: $ spl-feature-proposal tally 8CyUVvio2oYAP28ZkMBPHq88ikhRgWet6i4NYsCW5Cxa Tallying is permissionless and may be run by anybody. Once this feature proposal is accepted, the HQ3baDfNU7WKCyWvtMYZmi51YPs7vhSiLn1ESYp3jhiA feature will be activated at the next epoch. Add --confirm flag to initiate the feature proposal Copy If the output looks good run the command again with the --confirm flag to continue, and then follow the remaining steps in the output to distribute the vote tokens to all the validators. COST: As a part of token distribution, the feature proposer will be financing the creation of SPL Token accounts for each of the validators. A SPL Token account requires 0.00203928 SOL at creation, so the cost for initiating a feature proposal on a network with 500 validators is approximately 1 SOL. "},{"title":"Tally the Votes‚Äã","type":1,"pageTitle":"Feature Proposal Program","url":"feature-proposal#tally-the-votes","content":"After advertising to the validators that a feature proposal is pending their acceptance, the votes are tallied by running: $ spl-feature-proposal tally 8CyUVvio2oYAP28ZkMBPHq88ikhRgWet6i4NYsCW5Cxa Copy Anybody may tally the vote. Once the required number of votes are tallied, the feature will be automatically activated at the start of the next epoch. Upon a successful activation the feature will now show as activated bysolana feature status as well. "},{"title":"Name Service","type":0,"sectionRef":"#","url":"name-service","content":"Name Service A SPL program for issuing and managing ownership of: domain names, Solana Pubkeys, URLs, Twitter handles, ipfs cid's etc.. This program could be used for dns, pubkey etc lookups via a browser extension for example, the goal is to create an easy way to identify Solana public keys with various links. Broader use cases are also imaginable. Key points: A Name is a string that maps to a record (program derived account) which can hold data.Each name is of a certain class and has a certain owner, both are identified by their pubkeys. The class of a name needs to sign the issuance of it.A name can have a parent name that is identified by the address of its record. The owner of the parent name (when it exists) needs to sign the issuance of the child name.The data of a name registry is controlled by the class keypair or, when it is set to Pubkey::default(), by the name owner keypair.Only the owner can delete a name registry. Remarks and use cases: Domain name declarations: One could arbitrarily set-up a class that we can call Top-Level-Domain names. Names in this class can only be issued with the permission of the class keypair, ie the administrator, who can enforce that TLD names are of the type &quot;.something&quot;. From then on one could create and own the TLD &quot;.sol&quot; and create a class of &quot;.sol&quot; sub-domains, administrating the issuance of the &quot;something.sol&quot; sub-domains that way (by setting the parent name to the address of the &quot;.sol&quot; registry). An off-chain browser extension could then, similarly to DNS, parse the user SPL name service URL input and descend the chain of names, verifying that the names exist with the correct parenthood, and finally use the data of the last child name (or also a combination of the parents data) in order to resolve this call towards a real DNS URL or any kind of data. Although the ownership and class system makes the administration a given class centralized, the creation of new classes is permissionless and as a class owner any kind of decentralized governance signing program could be used. Twitter handles can be added as names of one specific name class. The class authority of will therefore hold the right to add a Twitter handle name. This enables the verification of Twitter accounts for example by asking the user to tweet his pubkey or a signed message. A bot that holds the private issuing authority key can then sign the Create instruction (with a metadata_authority that is the tweeted pubkey) and send it back to the user who will then submit it to the program. In this case the class will still be able to control the data of the name registry, and not the user for example. Therefore, another way of using this program would be to create a name (&quot;verified-twitter-handles&quot; for example) with the Pubkey::default() class and with the owner being the authority. That way verified Twitter names could be issued as child names of this parent by the owner, leaving the user as being able to modify the data of his Twitter name registry.","keywords":""},{"title":"Associated Token Account Program","type":0,"sectionRef":"#","url":"associated-token-account","content":"","keywords":""},{"title":"Motivation‚Äã","type":1,"pageTitle":"Associated Token Account Program","url":"associated-token-account#motivation","content":"A user may own arbitrarily many token accounts belonging to the same mint which makes it difficult for other users to know which account they should send tokens to and introduces friction into many other aspects of token management. This program introduces a way to deterministically derive a token account key from a user's main System account address and a token mint address, allowing the user to create a main token account for each token he owns. We call these accounts Associated Token Accounts. In addition, it allows a user to send tokens to another user even if the beneficiary does not yet have a token account for that mint. Unlike a system transfer, for a token transfer to succeed the recipient must have a token account with the compatible mint already, and somebody needs to fund that token account. If the recipient must fund it first, it makes things like airdrop campaigns difficult and just generally increases the friction of token transfers. AToken allows the sender to create the associated token account for the receiver, so the token transfer just works. See the SPL Token program for more information about tokens in general. "},{"title":"Background‚Äã","type":1,"pageTitle":"Associated Token Account Program","url":"associated-token-account#background","content":"Solana's programming model and the definitions of the Solana terms used in this document are available at: https://docs.solana.com/appshttps://docs.solana.com/terminology "},{"title":"Source‚Äã","type":1,"pageTitle":"Associated Token Account Program","url":"associated-token-account#source","content":"The Associated Token Account Program's source is available ongithub. "},{"title":"Interface‚Äã","type":1,"pageTitle":"Associated Token Account Program","url":"associated-token-account#interface","content":"The Associated Token Account Program is written in Rust and available oncrates.io anddocs.rs. "},{"title":"Finding the Associated Token Account address‚Äã","type":1,"pageTitle":"Associated Token Account Program","url":"associated-token-account#finding-the-associated-token-account-address","content":"The associated token account for a given wallet address is simply a program-derived account consisting of the wallet address itself and the token mint. The get_associated_token_addressRust function may be used by clients to derive the wallet's associated token address. The associated account address can be derived in TypeScript with: import { PublicKey } from '@solana/web3.js'; import { TOKEN_PROGRAM_ID } from '@solana/spl-token'; const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID: PublicKey = new PublicKey( 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL', ); async function findAssociatedTokenAddress( walletAddress: PublicKey, tokenMintAddress: PublicKey ): Promise&lt;PublicKey&gt; { return (await PublicKey.findProgramAddress( [ walletAddress.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), tokenMintAddress.toBuffer(), ], SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID ))[0]; } Copy "},{"title":"Creating an Associated Token Account‚Äã","type":1,"pageTitle":"Associated Token Account Program","url":"associated-token-account#creating-an-associated-token-account","content":"If the associated token account for a given wallet address does not yet exist, it may be created by anybody by issuing a transaction containing the instruction returned by create_associated_token_account. Regardless of creator the new associated token account will be fully owned by the wallet, as if the wallet itself had created it. "},{"title":"Stake Pool Program","type":0,"sectionRef":"#","url":"stake-pool","content":"","keywords":""},{"title":"Overview‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#overview","content":"SOL token holders can earn rewards and help secure the network by staking tokens to one or more validators. Rewards for staked tokens are based on the current inflation rate, total number of SOL staked on the network, and an individual validator‚Äôs uptime and commission (fee). Stake pools are an alternative method of earning staking rewards. This on-chain program pools together SOL to be staked by a staker, allowing SOL holders to stake and earn rewards without managing stakes. Additional information regarding staking and stake programming is available at: https://solana.com/stakinghttps://docs.solana.com/staking/stake-programming "},{"title":"Quick Start‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#quick-start","content":"If you're looking to get immediately into creating and running a stake pool, take a look at thereference scripts. These scripts require the Solana CLI tool suite, which can be downloaded by following the instructions at (https://docs.solana.com/cli/install-solana-cli-tools). Additionally, you must have a usable keypair, created at the default location using solana-keygen new. You'll see the following scripts: setup-local.sh: sets up a local test validator with validator vote accountssetup-stake-pool.sh: creates a new stake pool with hardcoded parametersdeposit-withdraw.sh: performs some deposits and withdrawals TheCLI READMEcontains more information about each of these scripts. "},{"title":"Motivation‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#motivation","content":"This document is intended for the main actors of the stake pool system: manager: creates and manages the stake pool, earns fees, can update the fee, staker, and managerstaker: adds and removes validators to the pool, rebalances stake among validatorsuser: provides staked SOL into an existing stake pool In its current iteration, the stake pool accepts active stakes or SOL, so deposits may come from either an active stake or SOL wallet. Withdrawals can return a fully active stake account from one of the stake pool's accounts, or SOL from the reserve. This means that stake pool managers and stakers must be comfortable with creating and delegating stakes, which are more advanced operations than sending and receiving SPL tokens and SOL. Additional information on stake operations are available at: https://docs.solana.com/cli/delegate-stakehttps://docs.solana.com/cli/manage-stake-accounts To reach a wider audience of users, stake pool managers are encouraged to provide a market for their pool's tokens, through an AMM like Token Swap. Alternatively, stake pool managers can partner with wallet and stake account providers for direct SOL deposits. "},{"title":"Operation‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#operation","content":"A stake pool manager creates a stake pool, and the staker includes validators that will receive delegations from the pool by adding &quot;validator stake accounts&quot; to the pool using the add-validator instruction. In this command, the stake pool creates a new stake account and delegates it to the desired validator. At this point, users can participate with deposits. They can directly deposit SOL into the stake pool using the deposit-sol instruction. Within this instruction, the stake pool will move SOL into the pool's reserve account, to be redistributed by the staker. Alternatively, users can deposit a stake account into the pool. To do this, they must delegate a stake account to the one of the validators in the stake pool. If the stake pool has a preferred deposit validator, the user must delegate their stake to that validator's vote account. Once the stake becomes active, which happens at the following epoch boundary (maximum 2 days), the user can deposit their stake into the pool using thedeposit-stake instruction. In exchange for their deposit (SOL or stake), the user receives SPL tokens representing their fractional ownership in pool. A percentage of the rewards earned by the pool goes to the pool manager as an epoch fee. Over time, as the stakes in the pool accrue rewards, the user's fractional ownership will be worth more than their initial deposit. Whenever they wish to exit the pool, the user may use the withdraw-sol instruction to receive SOL from the stake pool's reserve in exchange for stake pool tokens. Note that this operation will fail if there is not enough SOL in the stake pool's reserve, which is normal if the stake pool manager stakes all of the SOL in the pool. Alternatively, they can use the withdraw-stake instruction to withdraw an activated stake account in exchange for their SPL pool tokens. The user will get back a SOL stake account immediately. The ability to withdraw stake is always possible, under all circumstances. Note: when withdrawing stake, if the user wants to withdraw the SOL in the stake account, they must first deactivate the stake account and wait until the next epoch boundary (maximum 2 days). Once the stake is inactive, they can freely withdraw the SOL. The stake pool staker can add and remove validators, or rebalance the pool by decreasing the stake on a validator, waiting an epoch to move it into the stake pool's reserve account, then increasing the stake on another validator. The staker operation to add a new validator requires 0.00328288 SOL to create the stake account on a validator, so the stake pool staker will need liquidity on hand to fully manage the pool stakes. The SOL used to add a new validator is recovered when removing the validator. "},{"title":"Fees‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#fees","content":"The stake pool program provides managers many options for making the pool financially viable, predominantly through fees. There are five different sources of fees: Epoch: every epoch (roughly 2 days), the stake accounts in the pool earn inflation rewards, so the stake pool mints pool tokens into the manager's fee account as a proportion of the earned rewards. For example, if the pool earns 10 SOL in rewards, and the fee is set to 2%, the manager will earn pool tokens worth 0.2 SOL.SOL withdraw: sends a proportion of the desired withdrawal amount to the manager For example, if a user wishes to withdraw 100 pool tokens, and the fee is set to 3%, 3 pool tokens go to the manager, and the remaining 97 tokens go to the user in the form of a SOL.Stake withdraw: sends a proportion of the desired withdrawal amount to the manager before creating a new stake for the user.SOL deposit: converts the entire SOL deposit into pool tokens, then sends a proportion of those to the manager, and the rest to the userStake deposit: converts the stake account's delegation plus rent-exemption to pool tokens, sends a proportion of those to the manager, and the rest to the user For partner applications, there's the option of a referral fee on deposits. During SOL or stake deposits, the stake pool can redistribute a percentage of the fees to another address as a referral fee. This option is particularly attractive for wallet providers. When a wallet integrates a stake pool, the wallet developer will have the option to earn additional tokens anytime a user deposits into the stake pool. Stake pool managers can use this feature to create strategic partnerships and entice greater adoption of stake pools! "},{"title":"Funding restrictions‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#funding-restrictions","content":"To give the manager more control over funds entering the pool, stake pools allow deposit and withdrawal restrictions on SOL and stakes through three different &quot;funding authorities&quot;: SOL depositStake depositSOL withdrawal If the field is set, that authority must sign the associated instruction. For example, if the manager sets a stake deposit authority, then that address must sign every stake deposit instruction. This can also be useful in a few situations: Control who deposits into the stake poolProhibit a form of deposit. For example, the manager only wishes to have SOL deposits, so they set a stake deposit authority, making it only possible to deposit a stake account if that authority signs the transaction.Maintenance mode. If the pool needs time to reset fees or otherwise, the manager can temporarily restrict new deposits by setting deposit authorities. Note: in order to keep user funds safe, stake withdrawals are always permitted. "},{"title":"Background‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#background","content":"Solana's programming model and the definitions of the Solana terms used in this document are available at: https://docs.solana.com/appshttps://docs.solana.com/terminology "},{"title":"Source‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#source","content":"The Stake Pool Program's source is available onGitHub. For information about the types and instructions, the Stake Pool Rust docs are available at docs.rs. "},{"title":"Security Audits‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#security-audits","content":"Multiple security firms have audited the stake pool program to ensure total safety of funds. The audit reports are available for reading, presented in descending chronological order, and the commit hash that each was reviewed at: Quantstamp Initial review commit hash 99914c9Re-review commit hash 3b48fa0Final report https://solana.com/SolanaQuantstampStakePoolAudit.pdf Neodyme Review commit hash 0a85a9aReport https://solana.com/SolanaNeodymeStakePoolAudit.pdf Kudelski Review commit hash 3dd6767Report https://solana.com/SolanaKudelskiStakePoolAudit.pdf "},{"title":"Command-line Utility‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#command-line-utility","content":"The following explains the instructions available in the Stake Pool Program along with examples using the command-line utility. The spl-stake-pool command-line utility can be used to experiment with SPL tokens. Once you have Rust installed, run: $ cargo install spl-stake-pool-cli Copy Run spl-stake-pool --help for a full description of available commands. "},{"title":"Configuration‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#configuration","content":"The spl-stake-pool configuration is shared with the solana command-line tool. Current Configuration‚Äã solana config get Config File: ${HOME}/.config/solana/cli/config.yml RPC URL: https://api.mainnet-beta.solana.com WebSocket URL: wss://api.mainnet-beta.solana.com/ (computed) Keypair Path: ${HOME}/.config/solana/id.json Copy Cluster RPC URL‚Äã See Solana clusters for cluster-specific RPC URLs solana config set --url https://api.devnet.solana.com Copy Default Keypair‚Äã See Keypair conventionsfor information on how to setup a keypair if you don't already have one. Keypair File solana config set --keypair ${HOME}/new-keypair.json Copy Hardware Wallet URL (See URL spec) solana config set --keypair usb://ledger/ Copy Run Locally‚Äã If you would like to test a stake pool locally without having to wait for stakes to activate and deactivate, you can run the stake pool locally using thesolana-test-validator tool with shorter epochs, and pulling the current program from devnet. $ solana-test-validator -c SPoo1Ku8WFXoNDMHPsrGSTSG1Y47rzgn41SLUNakuHy -c EmiU8AQkB2sswTxVB6aCmsAJftoowZGGDXuytm6X65R3 --url devnet --slots-per-epoch 32 $ solana config set --url http://127.0.0.1:8899 Copy "},{"title":"Stake Pool Manager Examples‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#stake-pool-manager-examples","content":""},{"title":"Create a stake pool‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#create-a-stake-pool","content":"The stake pool manager controls the stake pool from a high level, and in exchange receives a fee in the form of SPL tokens. The manager sets the fee on creation. Let's create a pool with a 3% fee and a maximum of 1000 validator stake accounts: $ spl-stake-pool create-pool --epoch-fee-numerator 3 --epoch-fee-denominator 100 --max-validators 1000 Creating reserve stake DVwDn4LTRztuai4QeenM6fyzgiwUGpVXVNZ1mgKE1Pyc Creating mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB Creating associated token account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ to receive stake pool tokens of mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB, owned by 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn Creating pool fee collection account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ Signature: qQwqahLuC24wPwVdgVXtd7v5htSSPDAH3JxFNmXCv9aDwjjqygQ64VMg3WdPCiNzc4Bn8vtS3qcnUVHVP5MbKgL Creating stake pool Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Signature: 5z6uH3EuPcujeWGpAjBtciSUR3TxtMBgWYU4ULagUso4QGzE9JenhYHwYthJ4b3rS57ByUNEXTr2BFyF5PjWC42Y Copy The unique stake pool identifier is Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR. The identifier for the stake pool's SPL token mint isBoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB. The stake pool has full control over the mint. The pool creator's fee account identifier isDgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ. Every epoch, as stake accounts in the stake pool earn rewards, the program will mint SPL pool tokens equal to 3% of the gains on that epoch into this account. If no gains were observed, nothing will be deposited. The reserve stake account identifier is J5XB7mWpeaUZxZ6ogXT57qSCobczx27vLZYSgfSbZoBB. This account holds onto additional stake used when rebalancing between validators. For a stake pool with 1000 validators, the cost to create a stake pool is less than 0.5 SOL. The create-pool command allows setting all of the accounts and keypairs to pre-generated values, including: stake pool, through the --pool-keypair flagvalidator list, through the --validator-list-keypair flagpool token mint, through the --mint-keypair flagpool reserve stake account, through the --reserve-keypair flag Otherwise, these will all default to newly-generated keypairs. You can always check out the available options by running spl-stake-pool create-pool -h. "},{"title":"Create a restricted stake pool‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#create-a-restricted-stake-pool","content":"If a manager would like to restrict deposits (stake and SOL) to one key in particular, they can set a deposit authority at creation: $ spl-stake-pool create-pool --epoch-fee-numerator 3 --epoch-fee-denominator 100 --max-validators 1000 --deposit-authority authority_keypair.json Creating reserve stake DVwDn4LTRztuai4QeenM6fyzgiwUGpVXVNZ1mgKE1Pyc Creating mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB Creating associated token account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ to receive stake pool tokens of mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB, owned by 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn Creating pool fee collection account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ Signature: qQwqahLuC24wPwVdgVXtd7v5htSSPDAH3JxFNmXCv9aDwjjqygQ64VMg3WdPCiNzc4Bn8vtS3qcnUVHVP5MbKgL Creating stake pool Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Deposits will be restricted to 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn only, this can be changed using the set-funding-authority command. Signature: 5z6uH3EuPcujeWGpAjBtciSUR3TxtMBgWYU4ULagUso4QGzE9JenhYHwYthJ4b3rS57ByUNEXTr2BFyF5PjWC42Y Copy As the output says, the set-funding-authority can be used to modify or remove the deposit authority. As long as the deposit authority is set, SOL and stake deposits must be signed by 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn, so no one else can participate in the pool. As mentioned earlier, this feature does not prohibit withdrawals, so anyone with pool tokens will still be able to withdraw from the pool. "},{"title":"Set manager‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#set-manager","content":"The stake pool manager may pass their administrator privileges to another account. $ spl-stake-pool set-manager Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR --new-manager 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn Signature: 39N5gkaqXuWm6JPEUWfenKXeG4nSa71p7iHb9zurvdZcsWmbjdmSXwLVYfhAVHWucTY77sJ8SkUNpVpVAhe4eZ53 Copy At the same time, they may also change the SPL token account that receives fees every epoch. The mint for the provided token account must be the SPL token mint,BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB in our example. $ spl-stake-pool set-manager Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR --new-fee-receiver HoCsh97wRxRXVjtG7dyfsXSwH9VxdDzC7GvAsBE1eqJz Signature: 4aK8yzYvPBkP4PyuXTcCm529kjEH6tTt4ixc5D5ZyCrHwc4pvxAHj6wcr4cpAE1e3LddE87J1GLD466aiifcXoAY Copy "},{"title":"Set fee‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#set-fee","content":"The stake pool manager may update any of the fees associated with the stake pool, passing the numerator and denominator for the fraction that make up the fee. For an epoch fee of 10%, they could run: $ spl-stake-pool set-fee Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR epoch 10 100 Signature: 5yPXfVj5cbKBfZiEVi2UR5bXzVDuc2c3ruBwSjkAqpvxPHigwGHiS1mXQVE4qwok5moMWT5RNYAMvkE9bnfQ1i93 Copy In order to protect stake pool depositors from malicious managers, the program applies the new fee for the following epoch. For example, if the fee is 1% at epoch 100, and the manager sets it to 10%, the manager will still gain 1% for the rewards earned during epoch 100. Starting with epoch 101, the manager will earn 10%. Additionally, to prevent a malicious manager from immediately setting the withdrawal fee to a very high amount, making it practically impossible for users to withdraw, the stake pool program currently enforces a limit of 1.5x increase per epoch. For example, if the current withdrawal fee is 2.5%, the maximum that can be set for the next epoch is 3.75%. The possible options for the fee type are epoch, sol-withdrawal,stake-withdrawal, sol-deposit, and stake-deposit. "},{"title":"Set referral fee‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#set-referral-fee","content":"The stake pool manager may update the referral fee on deposits at any time, passing in a percentage amount. To set a stake deposit referral fee of 80%, they may run: $ spl-stake-pool set-referral-fee Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR stake 80 Signature: 4vhaBEDhuKkVwMxy7TpyfHEk3Z5kGZKerD1AgajQBdiMRQLZuNZKVR3KQaqbUYZM7UyfRXgkZNdAeP1NfvmwKdqb Copy For 80%, this means that 20% of the stake deposit fee goes to the manager, and 80% goes to the referrer. "},{"title":"Set staker‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#set-staker","content":"In order to manage the stake accounts, the stake pool manager or staker can set the staker authority of the stake pool's managed accounts. $ spl-stake-pool set-staker Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn Signature: 39N5gkaqXuWm6JPEUWfenKXeG4nSa71p7iHb9zurvdZcsWmbjdmSXwLVYfhAVHWucTY77sJ8SkUNpVpVAhe4eZ53 Copy Now, the new staker can perform any normal stake pool operations, including adding and removing validators and rebalancing stake. Important security note: the stake pool program only gives staking authority to the pool staker and always retains withdraw authority. Therefore, a malicious stake pool staker cannot steal funds from the stake pool. Note: to avoid &quot;disturbing the manager&quot;, the staker can also reassign their stake authority. "},{"title":"Set Funding Authority‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#set-funding-authority","content":"To restrict who can interact with the pool, the stake pool manager may require a particular signature on stake deposits, SOL deposits, or SOL withdrawals. This does not make the pool private, since all information is available on-chain, but it restricts who can use the pool. As an example, let's say a pool wants to restrict all SOL withdrawals. $ spl-stake-pool set-funding-authority Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR sol-withdraw AZ1PgxWSxw4ezX8gvpNgGsr39jJHCwtkaXr1mNMwWWeK Signature: 3gx7ckGNSL7gUUyxh4CU3RH3Lyt88hiCvYQ4QRKtnmrZHvAS93ebP6bf39WYGTeKDMVSJUuwBEmk9VFSaWtXsHVV Copy After running this command, AZ1PgxWSxw4ezX8gvpNgGsr39jJHCwtkaXr1mNMwWWeK must sign all SOL withdrawals, otherwise the operation fails. After some time, if the manager wishes to enable SOL withdrawals, they can remove the restriction: $ spl-stake-pool set-funding-authority Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR sol-withdraw --unset Signature: 5kWeBqoxyvANMHCP4ydsZRf8QU4hMotLnKkFbTEdvqEVywo4F3MpZtay7D57FbjJZpdp72fc3vrbxJi9qDLfLCnD Copy Now, anyone can withdraw SOL from the stake pool, provided there is enough SOL left in the reserve. The options for funding authorities are sol-withdraw, sol-deposit, and stake-deposit. Note: it is impossible to restrict stake withdrawals. This would create an opportunity for malicious pool managers to effectively lock user funds. "},{"title":"Stake Pool Staker Examples‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#stake-pool-staker-examples","content":""},{"title":"Add a validator to the pool‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#add-a-validator-to-the-pool","content":"In order to accommodate large numbers of user deposits into the stake pool, the stake pool only manages one stake account per validator. To add a new validator to the stake pool, the staker must use the add-validator command. Let's add some random validators to the stake pool. $ spl-stake-pool add-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk Adding stake account F8e8Ympp4MkDSPZdvRxdQUZXRkMBDdyqgHa363GShAPt, delegated to 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk Signature: 5tdpsx64mVcSHBK8vMbBzFDHnEZB6GUmVpqSXXE5hezMAzPYwZbJCBtAHakDAiuWNcrMongGrmwDaeywhVz4i8pi Copy In order to maximize censorship resistance, we want to distribute our SOL to as many validators as possible, so let's add a few more. $ spl-stake-pool add-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H Adding stake account 5AaobwjccyHnXhFCd24uiX6VqPjXE3Ry4o92fJjqqjAr, delegated to J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H Signature: 4xeve6gWuiffqBLAMcqa8s7dCMvBmSVdKbDu5WQhigLiXHdCjSNEwoZRexTZji786qgEjXg3nrUh4HcTt3RauZV5 $ spl-stake-pool add-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Adding stake account 3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx, delegated to EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Signature: 4VJYHpPmWkP99TdgYUTgLYixmhqmqsEkWtg4j7zvGZFjYbnLgryu48aV6ub8bqDyULzKckUhb6tvcmZmMX5AFf5G Copy We can see the status of a stake account using the Solana command-line utility. $ solana stake-account 5AaobwjccyHnXhFCd24uiX6VqPjXE3Ry4o92fJjqqjAr Balance: 0.00328288 SOL Rent Exempt Reserve: 0.00228288 SOL Delegated Stake: 0.001 SOL Active Stake: 0 SOL Activating Stake: 0.001 SOL Stake activates starting from epoch: 5 Delegated Vote Account Address: J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H Stake Authority: DS3AyFN9dF1ruNBcSeo8XXQR8UyVMhcCPcnjU5GnY18S Withdraw Authority: DS3AyFN9dF1ruNBcSeo8XXQR8UyVMhcCPcnjU5GnY18S Copy The stake pool creates these special staking accounts with 0.001 SOL as the required minimum delegation amount. The stake and withdraw authorities are the stake pool withdraw authority, program addresses derived from the stake pool's address. We can also see the status of the stake pool. $ spl-stake-pool list Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Stake Pool: Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Pool Token Mint: BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB Epoch Fee: 3/100 of epoch rewards Withdrawal Fee: none Stake Deposit Fee: none SOL Deposit Fee: none SOL Deposit Referral Fee: none Stake Deposit Referral Fee: none Reserve Account: EN4px2h4gFkYtsQUi4yeCYBrdRM4DoRxCVJyavMXEAm5 Available Balance: ‚óé0.000000000 Vote Account: EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Balance: ‚óé0.000000000 Last Update Epoch: 4 Vote Account: J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H Balance: ‚óé0.000000000 Last Update Epoch: 4 Vote Account: 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk Balance: ‚óé0.000000000 Last Update Epoch: 4 Total Pool Stake: ‚óé0.000000000 Total Pool Tokens: 0.00000000 Current Number of Validators: 3 Max Number of Validators: 1000 Copy To make reading easier, the tool will not show balances that cannot be touched by the stake pool. The stake account 5AaobwjccyHnXhFCd24uiX6VqPjXE3Ry4o92fJjqqjAr, delegated to J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H, actually has a balance of 0.00328288 SOL, but since this is the minimum required amount, it is not shown by the CLI. "},{"title":"Remove validator stake account‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#remove-validator-stake-account","content":"If the stake pool staker wants to stop delegating to a vote account, they can totally remove the validator stake account from the stake pool. As with adding a validator, the validator stake account must have exactly 0.00328288 SOL (0.001 SOL delegated, 0.00228288 SOL for rent exemption) to be removed. If that is not the case, the staker must first decrease the stake to that minimum amount. Let's assume that the validator stake account delegated toJ3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H has a total delegated amount of 7.5 SOL. To reduce that number, the staker can run: $ spl-stake-pool decrease-validator-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H 6.5 Signature: ZpQGwT85rJ8Y9afdkXhKo3TVv4xgTz741mmZj2vW7mihYseAkFsazWxza2y8eNGY4HDJm15c1cStwyiQzaM3RpH Copy Now, let's try to remove validator J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H, with stake account 5AaobwjccyHnXhFCd24uiX6VqPjXE3Ry4o92fJjqqjAr. $ spl-stake-pool remove-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H Removing stake account 5AaobwjccyHnXhFCd24uiX6VqPjXE3Ry4o92fJjqqjAr, delegated to J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H Creating account to receive stake nHEEyey8KkgHuVRAUDzkH5Q4PkA4veSHuTxgG6C8L2G Signature: 4XprnR768Ch6LUvqUVLTjMCiqdYvtjNfECh4izErqwbsASTGjUBz7NtLZHAiraTqhs7b9PoSAazetdsgXa6J4wVu Copy Unlike a normal withdrawal, the validator stake account is totally moved from the stake pool and into a new account belonging to the administrator. Note: since removal is only possible when the validator stake is at the minimum amount of 0.00328288, the administrator does not get any control of user funds, and only recovers the amount contributed during add-validator. The authority for the withdrawn stake account can also be specified using the--new-authority flag: $ spl-stake-pool remove-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H --new-authority 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn Signature: 5rrQ3xhDWyiPkUTAQkNAeq31n6sMf1xsg2x9hVY8Vj1NonwBnhxuTv87nADLkwC8Xzc4CGTNCTX2Vph9esWnXk2d Copy We can check the removed stake account: $ solana stake-account nHEEyey8KkgHuVRAUDzkH5Q4PkA4veSHuTxgG6C8L2G Balance: 0.003282880 SOL Rent Exempt Reserve: 0.00328288 SOL Delegated Stake: 0.001000000 SOL Active Stake: 0.001000000 SOL Delegated Vote Account Address: J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H Stake Authority: 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn Withdraw Authority: 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn Copy "},{"title":"Rebalance the stake pool‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#rebalance-the-stake-pool","content":"As time goes on, users will deposit to and withdraw from all of the stake accounts managed by the pool, and the stake pool staker may want to rebalance the stakes. For example, let's say the staker wants the same delegation to every validator in the pool. When they look at the state of the pool, they see: $ spl-stake-pool list Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Stake Pool: Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Pool Token Mint: BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB Epoch Fee: 3/100 of epoch rewards Withdrawal Fee: none Stake Deposit Fee: none SOL Deposit Fee: none SOL Deposit Referral Fee: none Stake Deposit Referral Fee: none Reserve Account: EN4px2h4gFkYtsQUi4yeCYBrdRM4DoRxCVJyavMXEAm5 Available Balance: ‚óé10.006848640 Vote Account: EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Balance: ‚óé100.000000000 Last Update Epoch: 4 Vote Account: J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H Balance: ‚óé10.000000000 Last Update Epoch: 4 Vote Account: 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk Balance: ‚óé10.000000000 Last Update Epoch: 4 Total Pool Stake: ‚óé130.006848640 Total Pool Tokens: 130.00684864 Current Number of Validators: 3 Max Number of Validators: 1000 Copy This isn't great! The first stake account, EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQhas too much allocated. For their strategy, the staker wants the 100SOL to be distributed evenly, meaning 40 in each account. They need to move 30 to J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H and38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk. Decrease validator stake‚Äã First, they need to decrease the amount on stake account3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx, delegated toEhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ, by a total of 60 SOL. They decrease that amount of SOL: $ spl-stake-pool decrease-validator-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ 60 Signature: ZpQGwT85rJ8Y9afdkXhKo3TVv4xgTz741mmZj2vW7mihYseAkFsazWxza2y8eNGY4HDJm15c1cStwyiQzaM3RpH Copy Internally, this instruction splits and deactivates 60 SOL from the validator stake account 3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx into a transient stake account, owned and managed entirely by the stake pool. Once the stake is deactivated during the next epoch, the update command will automatically merge the transient stake account into a reserve stake account, also entirely owned and managed by the stake pool. Increase validator stake‚Äã Now that the reserve stake account has enough to perform the rebalance, the staker can increase the stake on the two other validators,J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H and38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk. They add 30 SOL to J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H: $ spl-stake-pool increase-validator-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H 30 Signature: 3GJACzjUGLPjcd9RLUW86AfBLWKapZRkxnEMc2yHT6erYtcKBgCapzyrVH6VN8Utxj7e2mtvzcigwLm6ZafXyTMw Copy And they add 30 SOL to 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk: $ spl-stake-pool increase-validator-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk 30 Signature: 4zaKYu3MQ3as8reLbuHKaXN8FNaHvpHuiZtsJeARo67UKMo6wUUoWE88Fy8N4EYQYicuwULTNffcUD3a9jY88PoU Copy Internally, this instruction also uses transient stake accounts. This time, the stake pool splits from the reserve stake, into the transient stake account, then activates it to the appropriate validator. One to two epochs later, once the transient stakes activate, the update command automatically merges the transient stakes into the validator stake account, leaving a fully rebalanced stake pool: $ spl-stake-pool list Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Stake Pool: Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Pool Token Mint: BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB Preferred Deposit Validator: 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk Epoch Fee: 3/100 of epoch rewards Withdrawal Fee: none Stake Deposit Fee: none SOL Deposit Fee: none SOL Deposit Referral Fee: none Stake Deposit Referral Fee: none Reserve Account: EN4px2h4gFkYtsQUi4yeCYBrdRM4DoRxCVJyavMXEAm5 Available Balance: ‚óé10.006848640 Vote Account: EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Balance: ‚óé40.000000000 Last Update Epoch: 8 Vote Account: J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H Balance: ‚óé40.000000000 Last Update Epoch: 8 Vote Account: 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk Balance: ‚óé40.000000000 Last Update Epoch: 8 Total Pool Stake: ‚óé130.006848640 Total Pool Tokens: 130.00684864 Current Number of Validators: 3 Max Number of Validators: 1000 Copy Due to staking rewards that accrued during the rebalancing process, the pool may not perfectly balanced. This is completely normal. "},{"title":"Set Preferred Deposit / Withdraw Validator‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#set-preferred-deposit--withdraw-validator","content":"Since a stake pool accepts deposits to any of its stake accounts, and allows withdrawals from any of its stake accounts, it could be used by malicious arbitrageurs looking to maximize returns each epoch. For example, if a stake pool has 1000 validators, an arbitrageur could stake to any one of those validators. At the end of the epoch, they can check which validator has the best performance, deposit their stake, and immediately withdraw from the highest performing validator. Once rewards are paid out, they can take their valuable stake, and deposit it back for more than they had. To mitigate this arbitrage, a stake pool staker can set a preferred withdraw or deposit validator. Any deposits or withdrawals must go to the corresponding stake account, making this attack impossible without a lot of funds. Let's set a preferred deposit validator stake account: $ spl-stake-pool set-preferred-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR deposit --vote-account EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Signature: j6fbTqGJ8ehgKnSPns1adaSeFwg5M3wP1a32qYwZsQjymYoSejFUXLNGwvHSouJcFm4C78HUoC8xd7cvb5iActL Copy And then let's set the preferred withdraw validator stake account to the same one: $ spl-stake-pool set-preferred-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR withdraw --vote-account EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Signature: 4MKdYLyFqU6H3311YZDeLtsoeGZMzswBHyBCRjHfkzuN1rB4LXJbPfkgUGLKkdbsxJvPRub7SqB1zNPTqDdwti2w Copy At any time, they may also unset the preferred validator: $ spl-stake-pool set-preferred-validator Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR withdraw --unset Signature: 5Qh9FA3EXtJ7nKw7UyxmMWXnTMLRKQqcpvfEsEyBtxSPqzPAXp2vFXnPg1Pw8f37JFdvyzYay65CtA8Z1ewzVkvF Copy The preferred validators are marked in the list command: $ spl-stake-pool list Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Stake Pool: Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Pool Token Mint: BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB Preferred Deposit Validator: EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Preferred Withdraw Validator: EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ ... Copy "},{"title":"User Examples‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#user-examples","content":""},{"title":"List validator stake accounts‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#list-validator-stake-accounts","content":"In order to deposit into the stake pool, a user must first delegate some stake to one of the validator stake accounts associated with the stake pool. The command-line utility has a special instruction for finding out which vote accounts are already associated with the stake pool. $ spl-stake-pool list Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Stake Pool: Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Pool Token Mint: BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB Preferred Deposit Validator: 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk Epoch Fee: 3/100 of epoch rewards Withdrawal Fee: none Stake Deposit Fee: none SOL Deposit Fee: none SOL Deposit Referral Fee: none Stake Deposit Referral Fee: none Reserve Account: EN4px2h4gFkYtsQUi4yeCYBrdRM4DoRxCVJyavMXEAm5 Available Balance: ‚óé10.006848640 Vote Account: EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Balance: ‚óé35.000000000 Last Update Epoch: 8 Vote Account: J3xu64PWShcMen99kU3igxtwbke2Nwfo8pkZNRgrq66H Balance: ‚óé35.000000000 Last Update Epoch: 8 Vote Account: 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk Balance: ‚óé35.000000000 Last Update Epoch: 8 Total Pool Stake: ‚óé115.006848640 Total Pool Tokens: 115.00684864 Current Number of Validators: 3 Max Number of Validators: 1000 Copy "},{"title":"Deposit SOL‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#deposit-sol","content":"Stake pools accept SOL deposits directly from a normal SOL wallet account, and in exchange mint the appropriate amount of pool tokens. $ spl-stake-pool deposit-sol Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 100 Using existing associated token account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ to receive stake pool tokens of mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB, owned by 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn Signature: 23CptpZaq33njCpJPAvk8XS53xXwpfqF1sGxChk3VDB5mzz7XPKQqwsreun3iwZ6b51AyHqGBaUyc6tx9fqvF9JK Copy In return, the stake pool has minted us new pool tokens, representing our share of ownership in the pool. We can double-check our stake pool account using the SPL token command-line utility. $ spl-token balance BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB 100.00000000 Copy "},{"title":"Withdraw SOL‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#withdraw-sol","content":"Stake pools allow SOL withdrawals directly from the reserve and into a normal SOL wallet account, and in exchange burns the provided pool tokens. $ spl-stake-pool withdraw-sol Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 7VXPpSxneL6JLj18Naw2gkukXtjBZfbmPh18cnoUCMD8 2 Signature: 4bqZKUUrjVspqTGqGqX4zxnHnJB67WbeukKUZRmxJ2yFmr275CtHPjZNzQJD9Pe7Q6mSxnUpcVv9FUdAbGP9RyBc Copy The stake pool has burned 2 pool tokens, and in return, sent SOL to7VXPpSxneL6JLj18Naw2gkukXtjBZfbmPh18cnoUCMD8. You can check that the pool tokens have been burned: $ spl-token balance BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB 98.00000000 Copy And you can check that the recipient has been credited: $ solana balance 7VXPpSxneL6JLj18Naw2gkukXtjBZfbmPh18cnoUCMD8 2 SOL Copy "},{"title":"Deposit stake‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#deposit-stake","content":"Stake pools also accept deposits from active stake accounts, so we must first create stake accounts and delegate them to one of the validators managed by the stake pool. Using the list command from the previous section, we see that38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk is a valid vote account, so let's create a stake account and delegate our stake there. $ solana-keygen new --no-passphrase -o stake-account.json Generating a new keypair Wrote new keypair to stake-account.json ============================================================================ pubkey: 97wBBiLVA7fUViEew8yV8R6tTdKithZDVz8LHLfF9sTJ ============================================================================ Save this seed phrase to recover your new keypair: ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ============================================================================ $ solana create-stake-account stake-account.json 10 Signature: 5Y9r6MNoqJzVX8TWryAJbdp8i2DvintfxbYWoY6VcLEPgphK2tdydhtJTd3o3dF7QdM2Pg8sBFDZuyNcMag3nPvj $ solana delegate-stake 97wBBiLVA7fUViEew8yV8R6tTdKithZDVz8LHLfF9sTJ 38DYMkwYCvsj8TC6cNaEvFHHVDYeWDp1qUgMgyjNqZXk Signature: 2cDjHXSHjuadGQf1NQpPi43A8R19aCifsY16yTcictKPHcSAXN5TvXZ58nDJwkYs12tuZfTh5WVgAMSvptfrKdPP Copy Two epochs later, when the stake is fully active and has received one epoch of rewards, we can deposit the stake into the stake pool. $ spl-stake-pool deposit-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 97wBBiLVA7fUViEew8yV8R6tTdKithZDVz8LHLfF9sTJ Depositing stake 97wBBiLVA7fUViEew8yV8R6tTdKithZDVz8LHLfF9sTJ into stake pool account F8e8Ympp4MkDSPZdvRxdQUZXRkMBDdyqgHa363GShAPt Using existing associated token account DgyZrAq88bnG1TNRxpgDQzWXpzEurCvfY2ukKFWBvADQ to receive stake pool tokens of mint BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB, owned by 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn Signature: 45x2UtA1b49eBPtRHdkvA3k8JneZzfwjptNN1kKQZaPABYiJ4hSA8qwi7qLNN5b3Fr4Z6vXhJprrTCpkk3f8UqgD Copy The CLI will default to using the fee payer'sAssociated Token Account for stake pool tokens and the withdraw authority on the deposited stake account. Alternatively, you can create an SPL token account yourself and pass it as thetoken-receiver for the command, and specify the withdraw authority on the stake account using the withdraw-authority flag. $ spl-stake-pool deposit-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 97wBBiLVA7fUViEew8yV8R6tTdKithZDVz8LHLfF9sTJ --token-receiver 34XMHa3JUPv46ftU4dGHvemZ9oKVjnciRePYMcX3rjEF --withdraw-authority authority.json Depositing stake 97wBBiLVA7fUViEew8yV8R6tTdKithZDVz8LHLfF9sTJ into stake pool account F8e8Ympp4MkDSPZdvRxdQUZXRkMBDdyqgHa363GShAPt Signature: 4AESGZzqBVfj5xQnMiPWAwzJnAtQDRFK1Ha6jqKKTs46Zm5fw3LqgU1mRAT6CKTywVfFMHZCLm1hcQNScSMwVvjQ Copy In return, the stake pool has minted us new pool tokens, representing our share of ownership in the pool. We can double-check our stake pool account using the SPL token command-line utility. $ spl-token balance BoNneHKDrX9BHjjvSpPfnQyRjsnc9WFH71v8wrgCd7LB 10.00000000 Copy Note on stake deposit fee‚Äã Stake pools have separate fees for stake and SOL, so the total fee from depositing a stake account is calculated from the rent-exempt reserve as SOL, and the delegation as stake. For example, if a stake pool has a stake deposit fee of 1%, and a SOL deposit fee of 5%, and you deposit a stake account with 10 SOL in stake, and .00228288 SOL in rent-exemption, the total fee charged is: total_fee = stake_delegation * stake_deposit_fee + rent_exemption * sol_deposit_fee total_fee = 10 * 1% + .00228288 * 5% total_fee = 0.100114144 Copy "},{"title":"Update‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#update","content":"Every epoch, the network pays out rewards to stake accounts managed by the stake pool, increasing the value of pool tokens minted on deposit. In order to calculate the proper value of these stake pool tokens, we must update the total value managed by the stake pool every epoch. $ spl-stake-pool update Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Signature: 2rtPNGKFSSnXFCb6MKG5wHp34dkB5hJWNhro8EU2oGh1USafAgzu98EgoRnPLi7ojQfmTpvXk4S7DWXYGu5t85Ka Signature: 5V2oCNvZCNJfC6QXHmR2UHGxVMip6nfZixYkVjFQBTyTf2Z9s9GJ9BjkxSFGvUsvW6zc2cCRv9Lqucu1cgHMFcVU Copy If another user already updated the stake pool balance for the current epoch, we see a different output. $ spl-stake-pool update Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR Update not required Copy If no one updates the stake pool in the current epoch, all instructions, including deposit and withdraw, will fail. The update instruction is permissionless, so any user can run it before interacting with the pool. As a convenience, the CLI attempts to update before running any instruction on the stake pool. If the stake pool transient stakes are in an unexpected state, and merges are not possible, there is the option to only update the stake pool balances without performing merges using the --no-merge flag. $ spl-stake-pool update Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR --no-merge Signature: 5cjdZG727uzwnEEG3vJ1vskA9WsXibaEHh7imXSb2S1cwEYK4Q3btr2GEeAV8EffK4CEQ2WM6PQxawkJAHoZ4jsQ Signature: EBHbSRstJ3HxKwYKak8vEwVMKr1UBxdbqs5KuX3XYt4ppPjhaziGEtvL2TJCm1HLokbrtMeTEv57Ef4xhByJtJP Copy Later on, whenever the transient stakes are ready to be merged, it is possible to force another update in the same epoch using the --force flag. $ spl-stake-pool update Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR --force Signature: 5RneEBwJkFytBJaJdkvCTHFrG3QzE3SGf9vdBm9gteCcHV4HwaHzj3mjX1hZg4yCREQSgmo3H9bPF6auMmMFTSTo Signature: 1215wJUY7vj82TQoGCacQ2VJZ157HnCTvfsUXkYph3nZzJNmeDaGmy1nCD7hkhFfxnQYYxVtec5TkDFGGB4e7EvG Copy "},{"title":"Withdraw stake‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#withdraw-stake","content":"Whenever the user wants to recover their SOL plus accrued rewards, they can provide their pool tokens in exchange for an activated stake account. Let's withdraw active staked SOL in exchange for 5 pool tokens. $ spl-stake-pool withdraw-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 5 Withdrawing ‚óé5.000000000, or 5 pool tokens, from stake account 3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx, delegated to EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Creating account to receive stake 5GuAyPAt6577HoGhSVRNBv6aHohVtjQ8q7q5i3X1p4tB Signature: 5fzaKt5MU8bLjJRgNZyEktKsgweSQzFRpubCGKPeuk9shNQb4CtTkbgZ2X5MmC1VRDZ3YcCTPdtL9sFpXYfoqaeV Copy The stake pool took 5 pool tokens, and in exchange the user received a fully active stake account, delegated to EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ. Let's double-check the status of the stake account: $ solana stake-account 5GuAyPAt6577HoGhSVRNBv6aHohVtjQ8q7q5i3X1p4tB Balance: 5.00228288 SOL Rent Exempt Reserve: 0.00228288 SOL Delegated Stake: 5 SOL Active Stake: 5 SOL Delegated Vote Account Address: EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Stake Authority: 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn Withdraw Authority: 4SnSuUtJGKvk2GYpBwmEsWG53zTurVM8yXGsoiZQyMJn Copy Note: this operation cost the user some funds, as they needed to create a new stake account with the minimum rent exemption in order to receive the funds. This allows the user to withdraw any amount of stake pool tokens, even if it is not enough to cover the stake account rent-exemption. Alternatively, the user can specify an existing uninitialized stake account to receive their stake using the --stake-receiver parameter. $ spl-stake-pool withdraw-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR --amount 0.02 --vote-account EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ --stake-receiver CZF2z3JJoDmJRcVjtsrz1BKUUGNL3VPW5FPFqge1bzmQ Withdrawing ‚óé5.000000000, or 5 pool tokens, from stake account 3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx, delegated to EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Signature: 2xBPVPJ749AE4hHNCNYdjuHv1EdMvxm9uvvraWfTA7Urrvecwh9w64URCyLLroLQ2RKDGE2QELM2ZHd8qRkjavJM Copy By default, the withdraw command uses the token-owner's associated token account to source the pool tokens. It's possible to specify the SPL token account using the --pool-account flag. $ spl-stake-pool withdraw-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 5 --pool-account 34XMHa3JUPv46ftU4dGHvemZ9oKVjnciRePYMcX3rjEF Withdrawing ‚óé5.000000000, or 5 pool tokens, from stake account 3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx, delegated to EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Creating account to receive stake CZF2z3JJoDmJRcVjtsrz1BKUUGNL3VPW5FPFqge1bzmQ Signature: 2xBPVPJ749AE4hHNCNYdjuHv1EdMvxm9uvvraWfTA7Urrvecwh9w64URCyLLroLQ2RKDGE2QELM2ZHd8qRkjavJM Copy By default, the withdraw command will withdraw from the largest validator stake accounts in the pool. It's also possible to specify a specific vote account for the withdraw using the --vote-account flag. $ spl-stake-pool withdraw-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR --amount 5 --vote-account EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Withdrawing ‚óé5.000000000, or 5 pool tokens, from stake account 3k7Nwu9jUSc6SNG11wzufKYoZXRFgxWamheGLYWp5Rvx, delegated to EhRbKi4Vhm1oUCGWHiLEMYZqDrHwEd7Jgzgi26QJKvfQ Creating account to receive stake CZF2z3JJoDmJRcVjtsrz1BKUUGNL3VPW5FPFqge1bzmQ Signature: 2xBPVPJ749AE4hHNCNYdjuHv1EdMvxm9uvvraWfTA7Urrvecwh9w64URCyLLroLQ2RKDGE2QELM2ZHd8qRkjavJM Copy Note that the associated validator stake account must have enough lamports to satisfy the pool token amount requested. Special case: exiting pool with a delinquent staker‚Äã With the reserve stake, it's possible for a delinquent or malicious staker to move all stake into the reserve through decrease-validator-stake, so the pool tokens will not gain rewards, and the stake pool users will not be able to withdraw their funds. To get around this case, it is also possible to withdraw from the stake pool's reserve, but only if all of the validator stake accounts are at the minimum amount of0.001 SOL + stake account rent exemption. $ spl-stake-pool withdraw-stake Zg5YBPAk8RqBR9kaLLSoN5C8Uv7nErBz1WC63HTsCPR 5 --use-reserve Withdrawing ‚óé5.000000000, or 5 pool tokens, from stake account J5XB7mWpeaUZxZ6ogXT57qSCobczx27vLZYSgfSbZoBB Creating account to receive stake 51XdXiBSsVzeuY79xJwWAGZgeKzzgFKWajkwvWyrRiNE Signature: yQH9n7Go6iCMEYXqWef38ZYBPwXDmbwKAJFJ4EHD6TusBpusKsfNuT3TV9TL8FmxR2N9ExZTZwbD9Njc3rMvUcf Copy "},{"title":"Appendix‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#appendix","content":""},{"title":"Activated stakes‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#activated-stakes","content":"As mentioned earlier, the stake pool only processes active stakes. This feature maintains fungibility of stake pool tokens. Fully activated stakes are not equivalent to inactive, activating, or deactivating stakes due to the time cost of staking. Otherwise, malicious actors can deposit stake in one state and withdraw it in another state without waiting. "},{"title":"Transient stake accounts‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#transient-stake-accounts","content":"Each validator gets one transient stake account, so the staker can only perform one action at a time on a validator. It's impossible to increase and decrease the stake on a validator at the same time. The staker must wait for the existing transient stake account to get merged during an update instruction before performing a new action. "},{"title":"Reserve stake account‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#reserve-stake-account","content":"Every stake pool is initialized with an undelegated reserve stake account, used to hold undelegated stake in process of rebalancing. After the staker decreases the stake on a validator, one epoch later, the update operation will merge the decreased stake into the reserve. Conversely, whenever the staker increases the stake on a validator, the lamports are drawn from the reserve stake account. "},{"title":"Safety of Funds‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#safety-of-funds","content":"One of the primary aims of the stake pool program is to always allow pool token holders to withdraw their funds at any time. To that end, let's look at the three classes of stake accounts in the stake pool system: validator stake: active stake accounts, one per validator in the pooltransient stake: activating or deactivating stake accounts, merged into the reserve after deactivation, or into the validator stake after activation, one per validatorreserve stake: inactive stake, to be used by the staker for rebalancing Additionally, the staker may set a &quot;preferred withdraw account&quot;, which forces users to withdraw from a particular stake account. This is to prevent malicious depositors from using the stake pool as a free conversion between validators. When processing withdrawals, the order of priority goes: preferred withdraw validator stake account (if set)validator stake accountstransient stake accountsreserve stake account If there is preferred withdraw validator, and that validator stake account has any SOL, a user must withdraw from that account. If that account is empty, or the preferred withdraw validator stake account is not set, then the user must withdraw from any validator stake account. If all validator stake accounts are empty, which may happen if the stake pool staker decreases the stake on all validators at once, then the user must withdraw from any transient stake account. If all transient stake accounts are empty, then the user must withdraw from the reserve. In this way, a user's funds are never at risk, and always redeemable. "},{"title":"Transaction sizes‚Äã","type":1,"pageTitle":"Stake Pool Program","url":"stake-pool#transaction-sizes","content":"The Solana transaction processor has two important limitations: size of the overall transaction, limited to roughly 1 MTU / packetcomputation budget per instruction A stake pool may manage hundreds of staking accounts, so it is impossible to update the total value of the stake pool in one instruction. Thankfully, the command-line utility breaks up transactions to avoid this issue for large pools. "},{"title":"Token Program","type":0,"sectionRef":"#","url":"token-old","content":"","keywords":""},{"title":"Background‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#background","content":"Solana's programming model and the definitions of the Solana terms used in this document are available at: https://docs.solana.com/appshttps://docs.solana.com/terminology "},{"title":"Source‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#source","content":"The Token Program's source is available ongithub "},{"title":"Interface‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#interface","content":"The Token Program is written in Rust and available on crates.io and docs.rs. Auto-generated C bindings are also availablehere JavaScript bindingsare available that support loading the Token Program on to a chain and issue instructions. See the SPL Associated Token Account program for convention around wallet address to token account mapping and funding. "},{"title":"Command-line Utility‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#command-line-utility","content":"The spl-token command-line utility can be used to experiment with SPL tokens. Once you have Rust installed, run: $ cargo install spl-token-cli Copy Run spl-token --help for a full description of available commands. "},{"title":"Configuration‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#configuration","content":"The spl-token configuration is shared with the solana command-line tool. Current Configuration‚Äã $ solana config get Config File: ${HOME}/.config/solana/cli/config.yml RPC URL: https://api.mainnet-beta.solana.com WebSocket URL: wss://api.mainnet-beta.solana.com/ (computed) Keypair Path: ${HOME}/.config/solana/id.json Copy Cluster RPC URL‚Äã See Solana clusters for cluster-specific RPC URLs $ solana config set --url https://api.devnet.solana.com Copy Default Keypair‚Äã See Keypair conventionsfor information on how to setup a keypair if you don't already have one. Keypair File $ solana config set --keypair ${HOME}/new-keypair.json Copy Hardware Wallet URL (See URL spec) $ solana config set --keypair usb://ledger/ Copy Airdrop SOL‚Äã Creating tokens and accounts requires SOL for account rent deposits and transaction fees. If the cluster you are targeting offers a faucet, you can get a little SOL for testing: $ solana airdrop 1 Copy "},{"title":"Example: Creating your own fungible token‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#example-creating-your-own-fungible-token","content":"$ spl-token create-token Creating token AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM Signature: 47hsLFxWRCg8azaZZPSnQR8DNTRsGyPNfUK7jqyzgt7wf9eag3nSnewqoZrVZHKm8zt3B6gzxhr91gdQ5qYrsRG4 Copy The unique identifier of the token is AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM. Tokens when initially created by spl-token have no supply: $ spl-token supply AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 0 Copy Let's mint some. First create an account to hold a balance of the newAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM token: $ spl-token create-account AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM Creating account 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi Signature: 42Sa5eK9dMEQyvD9GMHuKxXf55WLZ7tfjabUKDhNoZRAxj9MsnN7omriWMEHXLea3aYpjZ862qocRLVikvkHkyfy Copy 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi is now an empty account: $ spl-token balance AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 0 Copy Mint 100 tokens into the account: $ spl-token mint AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 100 Minting 100 tokens Token: AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM Recipient: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi Signature: 41mARH42fPkbYn1mvQ6hYLjmJtjW98NXwd6pHqEYg9p8RnuoUsMxVd16RkStDHEzcS2sfpSEpFscrJQn3HkHzLaa Copy The token supply and account balance now reflect the result of minting: $ spl-token supply AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 100 Copy $ spl-token balance AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 100 Copy "},{"title":"Example: View all Tokens that you own‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#example-view-all-tokens-that-you-own","content":"$ spl-token accounts Token Balance ------------------------------------------------------------ 7e2X5oeAAJyUTi4PfSGXFLGhyPw2H8oELm1mx87ZCgwF 84 AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 100 AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 0 (Aux-1*) AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 1 (Aux-2*) Copy "},{"title":"Example: Wrapping SOL in a Token‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#example-wrapping-sol-in-a-token","content":"$ spl-token wrap 1 Wrapping 1 SOL into GJTxcnA5Sydy8YRhqvHxbQ5QNsPyRKvzguodQEaShJje Signature: 4f4s5QVMKisLS6ihZcXXPbiBAzjnvkBcp2A7KKER7k9DwJ4qjbVsQBKv2rAyBumXC1gLn8EJQhwWkybE4yJGnw2Y Copy To unwrap the Token back to SOL: $ spl-token unwrap GJTxcnA5Sydy8YRhqvHxbQ5QNsPyRKvzguodQEaShJje Unwrapping GJTxcnA5Sydy8YRhqvHxbQ5QNsPyRKvzguodQEaShJje Amount: 1 SOL Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg Signature: f7opZ86ZHKGvkJBQsJ8Pk81v8F3v1VUfyd4kFs4CABmfTnSZK5BffETznUU3tEWvzibgKJASCf7TUpDmwGi8Rmh Copy "},{"title":"Example: Transferring tokens to another user‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#example-transferring-tokens-to-another-user","content":"First the receiver uses spl-token create-account to create their associated token account for the Token type. Then the receiver obtains their wallet address by running solana address and provides it to the sender. The sender then runs: $ spl-token transfer AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg Transfer 50 tokens Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg Recipient associated token account: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks Signature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd Copy "},{"title":"Example: Transferring tokens to another user, with sender-funding‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#example-transferring-tokens-to-another-user-with-sender-funding","content":"If the receiver does not yet have an associated token account, the sender may choose to fund the receiver's account. The receiver obtains their wallet address by running solana address and provides it to the sender. The sender then runs to fund the receiver's associated token account, at the sender's expense, and then transfers 50 tokens into it: $ spl-token transfer --fund-recipient AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg Transfer 50 tokens Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg Recipient associated token account: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks Funding recipient: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks (0.00203928 SOL) Signature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd Copy "},{"title":"Example: Transferring tokens to an explicit recipient token account‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#example-transferring-tokens-to-an-explicit-recipient-token-account","content":"Tokens may be transferred to a specific recipient token account. The recipient token account must already exist and be of the same Token type. $ spl-token create-account AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM /path/to/auxiliary_keypair.json Creating account CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ Signature: 4yPWj22mbyLu5mhfZ5WATNfYzTt5EQ7LGzryxM7Ufu7QCVjTE7czZdEBqdKR7vjKsfAqsBdjU58NJvXrTqCXvfWW Copy $ spl-token accounts AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM -v Account Token Balance -------------------------------------------------------------------------------------------------------- 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 100 CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 0 (Aux-1*) Copy $ spl-token transfer 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi 50 CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ Transfer 50 tokens Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi Recipient: CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ Signature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd Copy $ spl-token accounts AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM -v Account Token Balance -------------------------------------------------------------------------------------------------------- 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 (Aux-1*) Copy "},{"title":"Example: Create a non-fungible token‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#example-create-a-non-fungible-token","content":"Create the token type with zero decimal place, $ spl-token create-token --decimals 0 Creating token 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z Signature: 4kz82JUey1B9ki1McPW7NYv1NqPKCod6WNptSkYqtuiEsQb9exHaktSAHJJsm4YxuGNW4NugPJMFX9ee6WA2dXts Copy then create an account to hold tokens of this new type: $ spl-token create-account 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z Creating account 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM Signature: sjChze6ecaRtvuQVZuwURyg6teYeiH8ZwT6UTuFNKjrdayQQ3KNdPB7d2DtUZ6McafBfEefejHkJ6MWQEfVHLtC Copy Now mint only one token into the account, $ spl-token mint 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z 1 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM Minting 1 tokens Token: 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z Recipient: 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM Signature: 2Kzg6ZArQRCRvcoKSiievYy3sfPqGV91Whnz6SeimhJQXKBTYQf3E54tWg3zPpYLbcDexxyTxnj4QF69ucswfdY Copy and disable future minting: $ spl-token authorize 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z mint --disable Updating 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z Current mint authority: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg New mint authority: disabled Signature: 5QpykLzZsceoKcVRRFow9QCdae4Dp2zQAcjebyEWoezPFg2Np73gHKWQicHG1mqRdXu3yiZbrft3Q8JmqNRNqhwU Copy Now the 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM account holds the one and only 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z token: $ spl-token account-info 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z Address: 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM Balance: 1 Mint: 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z Owner: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg State: Initialized Delegation: (not set) Close authority: (not set) Copy $ spl-token supply 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z 1 Copy "},{"title":"Multisig usage‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#multisig-usage","content":"The main difference in spl-token command line usage when referencing multisig accounts is in specifying the --owner argument. Typically the signer specified by this argument directly provides a signature granting its authority, but in the multisig case it just points to the address of the multisig account. Signatures are then provided by the multisig signer-set members specified by the--multisig-signer argument. Multisig accounts can be used for any authority on an SPL Token mint or token account. Mint account mint authority: spl-token mint ..., spl-token authorize ... mint ...Mint account freeze authority: spl-token freeze ..., spl-token thaw ...,spl-token authorize ... freeze ...Token account owner authority: spl-token transfer ..., spl-token approve ...,spl-token revoke ..., spl-token burn ..., spl-token wrap ...,spl-token unwrap ..., spl-token authorize ... owner ...Token account close authority: spl-token close ..., spl-token authorize ... close ... "},{"title":"Example: Mint with multisig authority‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#example-mint-with-multisig-authority","content":"First create keypairs to act as the multisig signer-set. In reality, these can be any supported signer, like: a Ledger hardware wallet, a keypair file, or a paper wallet. For convenience, keypair files will be used in this example. $ for i in $(seq 3); do solana-keygen new --no-passphrase -so &quot;signer-${i}.json&quot;; done Wrote new keypair to signer-1.json Wrote new keypair to signer-2.json Wrote new keypair to signer-3.json Copy In order to create the multisig account, the public keys of the signer-set must be collected. $ for i in $(seq 3); do SIGNER=&quot;signer-${i}.json&quot;; echo &quot;$SIGNER: $(solana-keygen pubkey &quot;$SIGNER&quot;)&quot;; done signer-1.json: BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ signer-2.json: DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY signer-3.json: D7ssXHrZJjfpZXsmDf8RwfPxe1BMMMmP1CtmX3WojPmG Copy Now the multisig account can be created with the spl-token create-multisigsubcommand. Its first positional argument is the minimum number of signers (M) that must sign a transaction affecting a token/mint account that is controlled by this multisig account. The remaining positional arguments are the public keys of all keypairs allowed (N) to sign for the multisig account. This example will use a &quot;2 of 3&quot; multisig account. That is, two of the three allowed keypairs must sign all transactions. NOTE: SPL Token Multisig accounts are limited to a signer-set of eleven signers (1 &lt;= N &lt;= 11) and minimum signers must be no more than N (1 &lt;= M &lt;= N) $ spl-token create-multisig 2 BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\ DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY D7ssXHrZJjfpZXsmDf8RwfPxe1BMMMmP1CtmX3WojPmG Copy Creating 2/3 multisig 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re Signature: 2FN4KXnczAz33SAxwsuevqrD1BvikP6LUhLie5Lz4ETt594X8R7yvMZzZW2zjmFLPsLQNHsRuhQeumExHbnUGC9A Copy Next create the token mint and receiving accountsas previously described $ spl-token create-token Creating token 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Signature: 3n6zmw3hS5Hyo5duuhnNvwjAbjzC42uzCA3TTsrgr9htUonzDUXdK1d8b8J77XoeSherqWQM8mD8E1TMYCpksS2r $ spl-token create-account 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Creating account EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC Signature: 5mVes7wjE7avuFqzrmSCWneKBQyPAjasCLYZPNSkmqmk2YFosYWAP9hYSiZ7b7NKpV866x5gwyKbbppX3d8PcE9s Copy Then set the mint account's minting authority to the multisig account $ spl-token authorize 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o mint 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re Updating 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Current mint authority: 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE New mint authority: 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re Signature: yy7dJiTx1t7jvLPCRX5RQWxNRNtFwvARSfbMJG94QKEiNS4uZcp3GhhjnMgZ1CaWMWe4jVEMy9zQBoUhzomMaxC Copy To demonstrate that the mint account is now under control of the multisig account, attempting to mint with one multisig signer fails $ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\ --owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\ --multisig-signer signer-1.json Copy Minting 1 tokens Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC RPC response error -32002: Transaction simulation failed: Error processing Instruction 0: missing required signature for instruction Copy But repeating with a second multisig signer, succeeds $ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\ --owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\ --multisig-signer signer-1.json \\ --multisig-signer signer-2.json Copy Minting 1 tokens Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC Signature: 2ubqWqZb3ooDuc8FLaBkqZwzguhtMgQpgMAHhKsWcUzjy61qtJ7cZ1bfmYktKUfnbMYWTC1S8zdKgU6m4THsgspT Copy "},{"title":"Example: Offline signing with multisig‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#example-offline-signing-with-multisig","content":"Sometimes online signing is not possible or desireable. Such is the case for example when signers are not in the same geographic location or when they use air-gapped devices not connected to the network. In this case, we use offline signing which combines the previous examples of multisig with offline signingand a nonce account. This example will use the same mint account, token account, multisig account, and multisig signer-set keypair filenames as the online example, as well as a nonce account that we create here: $ solana-keygen new -o nonce-keypair.json ... ====================================================================== pubkey: Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj ====================================================================== Copy $ solana create-nonce-account nonce-keypair.json 1 Signature: 3DALwrAAmCDxqeb4qXZ44WjpFcwVtgmJKhV4MW5qLJVtWeZ288j6Pzz1F4BmyPpnGLfx2P8MEJXmqPchX5y2Lf3r Copy $ solana nonce-account Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj Balance: 0.01 SOL Minimum Balance Required: 0.00144768 SOL Nonce blockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E Fee: 5000 lamports per signature Authority: 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE Copy For the fee-payer and nonce-authority roles, a local hot wallet at5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE will be used. First a template command is built by specifying all signers by their public key. Upon running this command, all signers will be listed as &quot;Absent Signers&quot; in the output. This command will be run by each offline signer to generate the corresponding signature. NOTE: The argument to the --blockhash parameter is the &quot;Nonce blockhash:&quot; field from the designated durable nonce account. $ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\ --owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\ --multisig-signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\ --multisig-signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY \\ --blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\ --fee-payer 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\ --nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\ --nonce-authority 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\ --sign-only \\ --mint-decimals 9 Copy Minting 1 tokens Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC Blockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E Absent Signers (Pubkey): 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY Copy Next each offline signer executes the template command, replacing each instance of their public key with the corresponding keypair. $ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\ --owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\ --multisig-signer signer-1.json \\ --multisig-signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY \\ --blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\ --fee-payer 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\ --nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\ --nonce-authority 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\ --sign-only \\ --mint-decimals 9 Copy Minting 1 tokens Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC Blockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E Signers (Pubkey=Signature): BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ=2QVah9XtvPAuhDB2QwE7gNaY962DhrGP6uy9zeN4sTWvY2xDUUzce6zkQeuT3xg44wsgtUw2H5Rf8pEArPSzJvHX Absent Signers (Pubkey): 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY Copy $ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\ --owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\ --multisig-signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\ --multisig-signer signer-2.json \\ --blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\ --fee-payer 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\ --nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\ --nonce-authority 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\ --sign-only \\ --mint-decimals 9 Copy Minting 1 tokens Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC Blockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E Signers (Pubkey=Signature): DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY=2brZbTiCfyVYSCp6vZE3p7qCDeFf3z1JFmJHPBrz8SnWSDZPjbpjsW2kxFHkktTNkhES3y6UULqS4eaWztLW7FrU Absent Signers (Pubkey): 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ Copy Finally, the offline signers communicate the Pubkey=Signature pair from the output of their command to the party who will broadcast the transaction to the cluster. The broadcasting party then runs the template command after modifying it as follows: Replaces any corresponding public keys with their keypair (--fee-payer ...and --nonce-authority ... in this example)Removes the --sign-only argument, and in the case of the mint subcommand, the --mint-decimals ... argument as it will be queried from the clusterAdds the offline signatures to the template command via the --signer argument $ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\ --owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\ --multisig-signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\ --multisig-signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY \\ --blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\ --fee-payer hot-wallet.json \\ --nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\ --nonce-authority hot-wallet.json \\ --signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ=2QVah9XtvPAuhDB2QwE7gNaY962DhrGP6uy9zeN4sTWvY2xDUUzce6zkQeuT3xg44wsgtUw2H5Rf8pEArPSzJvHX \\ --signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY=2brZbTiCfyVYSCp6vZE3p7qCDeFf3z1JFmJHPBrz8SnWSDZPjbpjsW2kxFHkktTNkhES3y6UULqS4eaWztLW7FrU Copy Minting 1 tokens Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC Signature: 2AhZXVPDBVBxTQLJohyH1wAhkkSuxRiYKomSSXtwhPL9AdF3wmhrrJGD7WgvZjBPLZUFqWrockzPp9S3fvzbgicy Copy "},{"title":"JSON RPC methods‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#json-rpc-methods","content":"There is a rich set of JSON RPC methods available for use with SPL Token: getTokenAccountBalancegetTokenAccountsByDelegategetTokenAccountsByOwnergetTokenLargestAccountsgetTokenSupply See https://docs.solana.com/apps/jsonrpc-api for more details. Additionally the versatile getProgramAccounts JSON RPC method can be employed in various ways to fetch SPL Token accounts of interest. "},{"title":"Finding all token accounts for a specific mint‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#finding-all-token-accounts-for-a-specific-mint","content":"To find all token accounts for the TESTpKgj42ya3st2SQTKiANjTBmncQSCqLAZGcSPLGM mint: curl http://api.mainnet-beta.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d ' { &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 1, &quot;method&quot;: &quot;getProgramAccounts&quot;, &quot;params&quot;: [ &quot;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&quot;, { &quot;encoding&quot;: &quot;jsonParsed&quot;, &quot;filters&quot;: [ { &quot;dataSize&quot;: 165 }, { &quot;memcmp&quot;: { &quot;offset&quot;: 0, &quot;bytes&quot;: &quot;TESTpKgj42ya3st2SQTKiANjTBmncQSCqLAZGcSPLGM&quot; } } ] } ] } ' Copy The &quot;dataSize&quot;: 165 filter selects all Token Accounts, and then the &quot;memcmp&quot;: ... filter selects based on themintaddress within each token account. "},{"title":"Finding all token accounts for a wallet‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#finding-all-token-accounts-for-a-wallet","content":"Find all token accounts owned by the vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg user: curl http://api.mainnet-beta.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d ' { &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 1, &quot;method&quot;: &quot;getProgramAccounts&quot;, &quot;params&quot;: [ &quot;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&quot;, { &quot;encoding&quot;: &quot;jsonParsed&quot;, &quot;filters&quot;: [ { &quot;dataSize&quot;: 165 }, { &quot;memcmp&quot;: { &quot;offset&quot;: 32, &quot;bytes&quot;: &quot;vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg&quot; } } ] } ] } Copy The &quot;dataSize&quot;: 165 filter selects all Token Accounts, and then the &quot;memcmp&quot;: ... filter selects based on theowneraddress within each token account. "},{"title":"Operational overview‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#operational-overview","content":""},{"title":"Creating a new token type‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#creating-a-new-token-type","content":"A new token type can be created by initializing a new Mint with theInitializeMint instruction. The Mint is used to create or &quot;mint&quot; new tokens, and these tokens are stored in Accounts. A Mint is associated with each Account, which means that the total supply of a particular token type is equal to the balances of all the associated Accounts. It's important to note that the InitializeMint instruction does not require the Solana account being initialized also be a signer. The InitializeMintinstruction should be atomically processed with the system instruction that creates the Solana account by including both instructions in the same transaction. Once a Mint is initialized, the mint_authority can create new tokens using theMintTo instruction. As long as a Mint contains a valid mint_authority, the Mint is considered to have a non-fixed supply, and the mint_authority can create new tokens with the MintTo instruction at any time. The SetAuthorityinstruction can be used to irreversibly set the Mint's authority to None, rendering the Mint's supply fixed. No further tokens can ever be Minted. Token supply can be reduced at any time by issuing a Burn instruction which removes and discards tokens from an Account. "},{"title":"Creating accounts‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#creating-accounts","content":"Accounts hold token balances and are created using the InitializeAccountinstruction. Each Account has an owner who must be present as a signer in some instructions. An Account's owner may transfer ownership of an account to another using theSetAuthority instruction. It's important to note that the InitializeAccount instruction does not require the Solana account being initialized also be a signer. The InitializeAccountinstruction should be atomically processed with the system instruction that creates the Solana account by including both instructions in the same transaction. "},{"title":"Transferring tokens‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#transferring-tokens","content":"Balances can be transferred between Accounts using the Transfer instruction. The owner of the source Account must be present as a signer in the Transferinstruction when the source and destination accounts are different. It's important to note that when the source and destination of a Transfer are the same, the Transfer will always succeed. Therefore, a successful Transferdoes not necessarily imply that the involved Accounts were valid SPL Token accounts, that any tokens were moved, or that the source Account was present as a signer. We strongly recommend that developers are careful about checking that the source and destination are different before invoking a Transferinstruction from within their program. "},{"title":"Burning‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#burning","content":"The Burn instruction decreases an Account's token balance without transferring to another Account, effectively removing the token from circulation permanently. There is no other way to reduce supply on chain. This is similar to transferring to an account with unknown private key or destroying a private key. But the act of burning by using Burn instructions is more explicit and can be confirmed on chain by any parties. "},{"title":"Authority delegation‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#authority-delegation","content":"Account owners may delegate authority over some or all of their token balance using the Approve instruction. Delegated authorities may transfer or burn up to the amount they've been delegated. Authority delegation may be revoked by the Account's owner via the Revoke instruction. "},{"title":"Multisignatures‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#multisignatures","content":"M of N multisignatures are supported and can be used in place of Mint authorities or Account owners or delegates. Multisignature authorities must be initialized with the InitializeMultisig instruction. Initialization specifies the set of N public keys that are valid and the number M of those N that must be present as instruction signers for the authority to be legitimate. It's important to note that the InitializeMultisig instruction does not require the Solana account being initialized also be a signer. TheInitializeMultisig instruction should be atomically processed with the system instruction that creates the Solana account by including both instructions in the same transaction. "},{"title":"Freezing accounts‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#freezing-accounts","content":"The Mint may also contain a freeze_authority which can be used to issueFreezeAccount instructions that will render an Account unusable. Token instructions that include a frozen account will fail until the Account is thawed using the ThawAccount instruction. The SetAuthority instruction can be used to change a Mint's freeze_authority. If a Mint's freeze_authority is set toNone then account freezing and thawing is permanently disabled and all currently frozen accounts will also stay frozen permanently. "},{"title":"Wrapping SOL‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#wrapping-sol","content":"The Token Program can be used to wrap native SOL. Doing so allows native SOL to be treated like any other Token program token type and can be useful when being called from other programs that interact with the Token Program's interface. Accounts containing wrapped SOL are associated with a specific Mint called the &quot;Native Mint&quot; using the public keySo11111111111111111111111111111111111111112. These accounts have a few unique behaviors InitializeAccount sets the balance of the initialized Account to the SOL balance of the Solana account being initialized, resulting in a token balance equal to the SOL balance.Transfers to and from not only modify the token balance but also transfer an equal amount of SOL from the source account to the destination account.Burning is not supportedWhen closing an Account the balance may be non-zero. The Native Mint supply will always report 0, regardless of how much SOL is currently wrapped. "},{"title":"Rent-exemption‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#rent-exemption","content":"To ensure a reliable calculation of supply, a consistency valid Mint, and consistently valid Multisig accounts all Solana accounts holding an Account, Mint, or Multisig must contain enough SOL to be considered rent exempt "},{"title":"Closing accounts‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#closing-accounts","content":"An account may be closed using the CloseAccount instruction. When closing an Account, all remaining SOL will be transferred to another Solana account (doesn't have to be associated with the Token Program). Non-native Accounts must have a balance of zero to be closed. "},{"title":"Non-Fungible tokens‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#non-fungible-tokens","content":"An NFT is simply a token type where only a single token has been minted. "},{"title":"Wallet Integration Guide‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#wallet-integration-guide","content":"This section describes how to integrate SPL Token support into an existing wallet supporting native SOL. It assumes a model whereby the user has a single system account as their main wallet address that they send and receive SOL from. Although all SPL Token accounts do have their own address on-chain, there's no need to surface these additional addresses to the user. There are two programs that are used by the wallet: SPL Token program: generic program that is used by all SPL TokensSPL Associated Token Account program: defines the convention and provides the mechanism for mapping the user's wallet address to the associated token accounts they hold. "},{"title":"How to fetch and display token holdings‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#how-to-fetch-and-display-token-holdings","content":"The getTokenAccountsByOwnerJSON RPC method can be used to fetch all token accounts for a wallet address. For each token mint, the wallet could have multiple token accounts: the associated token account and/or other ancillary token accounts By convention it is suggested that wallets roll up the balances from all token accounts of the same token mint into a single balance for the user to shield the user from this complexity. See the Garbage Collecting Ancillary Token Accountssection for suggestions on how the wallet should clean up ancillary token accounts on the user's behalf. "},{"title":"Associated Token Account‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#associated-token-account","content":"Before the user can receive tokens, their associated token account must be created on-chain, requiring a small amount of SOL to mark the account as rent-exempt. There's no restriction on who can create a user's associated token account. It could either be created by the wallet on behalf of the user or funded by a 3rd party through an airdrop campaign. The creation process is described here. It's highly recommended that the wallet create the associated token account for a given SPL Token itself before indicating to the user that they are able to receive that SPL Tokens type (typically done by showing the user their receiving address). A wallet that chooses to not perform this step may limit its user's ability to receive SPL Tokens from other wallets. Sample &quot;Add Token&quot; workflow‚Äã The user should first fund their associated token account when they want to receive SPL Tokens of a certain type to: Maximize interoperability with other wallet implementationsAvoid pushing the cost of creating their associated token account on the first sender The wallet should provide a UI that allow the users to &quot;add a token&quot;. The user selects the kind of token, and is presented with information about how much SOL it will cost to add the token. Upon confirmation, the wallet creates the associated token type as the describedhere. Sample &quot;Airdrop campaign&quot; workflow‚Äã For each recipient wallet addresses, send a transaction containing: Create the associated token account on the recipient's behalf.Use TokenInstruction::Transfer to complete the transfer Associated Token Account Ownership‚Äã ‚ö†Ô∏è The wallet should never use TokenInstruction::SetAuthority to set theAccountOwner authority of the associated token account to another address. "},{"title":"Ancillary Token Accounts‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#ancillary-token-accounts","content":"At any time ownership of an existing SPL Token account may be assigned to the user. One way to accomplish this is with thespl-token authorize &lt;TOKEN_ADDRESS&gt; owner &lt;USER_ADDRESS&gt; command. Wallets should be prepared to gracefully manage token accounts that they themselves did not create for the user. "},{"title":"Transferring Tokens Between Wallets‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#transferring-tokens-between-wallets","content":"The preferred method of transferring tokens between wallets is to transfer into associated token account of the recipient. The recipient must provide their main wallet address to the sender. The sender then: Derives the associated token account for the recipientFetches the recipient's associated token account over RPC and checks that it existsIf the recipient's associated token account does not yet exist, the sender wallet should create the recipient's associated token account as describedhere. The sender's wallet may choose to inform the user that as a result of account creation the transfer will require more SOL than normal. However a wallet that chooses to not support creating the recipient's associated token account at this time should present a message to the user with enough information to permit them to find a workaround (such as transferring the token through a fully compliant intermediary wallet such as https://sollet.io) to allow the users to accomplish their goalUse TokenInstruction::Transfer to complete the transfer The sender's wallet must not require that the recipient's main wallet address hold a balance before allowing the transfer. "},{"title":"Registry for token details‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#registry-for-token-details","content":"At the moment there exist two solutions for Token Mint registries: hard coded addresses in the wallet or dappspl-token-registrypackage, maintained at https://github.com/solana-labs/token-list A decentralized solution is in progress. "},{"title":"Garbage Collecting Ancillary Token Accounts‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#garbage-collecting-ancillary-token-accounts","content":"Wallets should empty ancillary token accounts as quickly as practical by transferring into the user's associated token account. This effort serves two purposes: If the user is the close authority for the ancillary account, the wallet can reclaim SOL for the user by closing the account.If the ancillary account was funded by a 3rd party, once the account is emptied that 3rd party may close the account and reclaim the SOL. One natural time to garbage collect ancillary token accounts is when the user next sends tokens. The additional instructions to do so can be added to the existing transaction, and will not require an additional fee. Cleanup Pseudo Steps: For all non-empty ancillary token accounts, add aTokenInstruction::Transfer instruction to the transfer the full token amount to the user's associated token account.For all empty ancillary token accounts where the user is the close authority, add a TokenInstruction::CloseAccount instruction If adding one or more of clean up instructions cause the transaction to exceed the maximum allowed transaction size, remove those extra clean up instructions. They can be cleaned up during the next send operation. The spl-token gc command provides an example implementation of this cleanup process. "},{"title":"Token Vesting Contract:‚Äã","type":1,"pageTitle":"Token Program","url":"token-old#token-vesting-contract","content":"This program allows you to lock arbitrary SPL tokens and release the locked tokens with a determined unlock schedule. An unlock schedule is made of a unix timestamp and a token amount, when initializing a vesting contract, the creator can pass an array of unlock schedule with an arbitrary size giving the creator of the contract complete control of how the tokens unlock over time. Unlocking works by pushing a permissionless crank on the contract that moves the tokens to the pre-specified address. The recipient address of a vesting contract can be modified by the owner of the current recipient key, meaning that vesting contract locked tokens can be traded. Code: https://github.com/Bonfida/token-vestingUI: https://vesting.bonfida.com/#/Audit: The audit was conducted by Kudelski, the report can be found here "},{"title":"Token Program","type":0,"sectionRef":"#","url":"token","content":"","keywords":""},{"title":"Background‚Äã","type":1,"pageTitle":"Token Program","url":"token#background","content":"Solana's programming model and the definitions of the Solana terms used in this document are available at: https://docs.solana.com/appshttps://docs.solana.com/terminology "},{"title":"Source‚Äã","type":1,"pageTitle":"Token Program","url":"token#source","content":"The Token Program's source is available ongithub "},{"title":"Interface‚Äã","type":1,"pageTitle":"Token Program","url":"token#interface","content":"The Token Program is written in Rust and available on crates.io and docs.rs. Auto-generated C bindings are also availablehere JavaScript bindingsare available that support loading the Token Program on to a chain and issue instructions. See the SPL Associated Token Account program for convention around wallet address to token account mapping and funding. "},{"title":"Reference Guide‚Äã","type":1,"pageTitle":"Token Program","url":"token#reference-guide","content":""},{"title":"Setup‚Äã","type":1,"pageTitle":"Token Program","url":"token#setup","content":"CLIJS The spl-token command-line utility can be used to experiment with SPL tokens. Once you have Rust installed, run: $ cargo install spl-token-cli Copy Run spl-token --help for a full description of available commands. Configuration‚Äã The spl-token configuration is shared with the solana command-line tool. Current Configuration‚Äã $ solana config get Config File: ${HOME}/.config/solana/cli/config.yml RPC URL: https://api.mainnet-beta.solana.com WebSocket URL: wss://api.mainnet-beta.solana.com/ (computed) Keypair Path: ${HOME}/.config/solana/id.json Copy Cluster RPC URL‚Äã See Solana clusters for cluster-specific RPC URLs $ solana config set --url https://api.devnet.solana.com Copy Default Keypair‚Äã See Keypair conventionsfor information on how to setup a keypair if you don't already have one. Keypair File $ solana config set --keypair ${HOME}/new-keypair.json Copy Hardware Wallet URL (See URL spec) $ solana config set --keypair usb://ledger/ Copy Airdrop SOL‚Äã Creating tokens and accounts requires SOL for account rent deposits and transaction fees. If the cluster you are targeting offers a faucet, you can get a little SOL for testing: CLIJS $ solana airdrop 1 Copy "},{"title":"Example: Creating your own fungible token‚Äã","type":1,"pageTitle":"Token Program","url":"token#example-creating-your-own-fungible-token","content":"CLIJS $ spl-token create-token Creating token AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM Signature: 47hsLFxWRCg8azaZZPSnQR8DNTRsGyPNfUK7jqyzgt7wf9eag3nSnewqoZrVZHKm8zt3B6gzxhr91gdQ5qYrsRG4 Copy The unique identifier of the token is AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM. Tokens when initially created by spl-token have no supply: CLIJS $ spl-token supply AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 0 Copy Let's mint some. First create an account to hold a balance of the newAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM token: CLIJS $ spl-token create-account AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM Creating account 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi Signature: 42Sa5eK9dMEQyvD9GMHuKxXf55WLZ7tfjabUKDhNoZRAxj9MsnN7omriWMEHXLea3aYpjZ862qocRLVikvkHkyfy Copy 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi is now an empty account: CLIJS $ spl-token balance AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 0 Copy Mint 100 tokens into the account: CLIJS $ spl-token mint AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 100 Minting 100 tokens Token: AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM Recipient: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi Signature: 41mARH42fPkbYn1mvQ6hYLjmJtjW98NXwd6pHqEYg9p8RnuoUsMxVd16RkStDHEzcS2sfpSEpFscrJQn3HkHzLaa Copy The token supply and account balance now reflect the result of minting: CLIJS $ spl-token supply AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 100 Copy $ spl-token balance AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 100 Copy "},{"title":"Example: View all Tokens that you own‚Äã","type":1,"pageTitle":"Token Program","url":"token#example-view-all-tokens-that-you-own","content":"CLIJS $ spl-token accounts Token Balance ------------------------------------------------------------ 7e2X5oeAAJyUTi4PfSGXFLGhyPw2H8oELm1mx87ZCgwF 84 AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 100 AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 0 (Aux-1*) AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 1 (Aux-2*) Copy "},{"title":"Example: Wrapping SOL in a Token‚Äã","type":1,"pageTitle":"Token Program","url":"token#example-wrapping-sol-in-a-token","content":"CLIJS $ spl-token wrap 1 Wrapping 1 SOL into GJTxcnA5Sydy8YRhqvHxbQ5QNsPyRKvzguodQEaShJje Signature: 4f4s5QVMKisLS6ihZcXXPbiBAzjnvkBcp2A7KKER7k9DwJ4qjbVsQBKv2rAyBumXC1gLn8EJQhwWkybE4yJGnw2Y Copy To unwrap the Token back to SOL: CLIJS $ spl-token unwrap GJTxcnA5Sydy8YRhqvHxbQ5QNsPyRKvzguodQEaShJje Unwrapping GJTxcnA5Sydy8YRhqvHxbQ5QNsPyRKvzguodQEaShJje Amount: 1 SOL Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg Signature: f7opZ86ZHKGvkJBQsJ8Pk81v8F3v1VUfyd4kFs4CABmfTnSZK5BffETznUU3tEWvzibgKJASCf7TUpDmwGi8Rmh Copy "},{"title":"Example: Transferring tokens to another user‚Äã","type":1,"pageTitle":"Token Program","url":"token#example-transferring-tokens-to-another-user","content":"First the receiver uses spl-token create-account to create their associated token account for the Token type. Then the receiver obtains their wallet address by running solana address and provides it to the sender. The sender then runs: CLIJS $ spl-token transfer AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg Transfer 50 tokens Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg Recipient associated token account: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks Signature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd Copy "},{"title":"Example: Transferring tokens to another user, with sender-funding‚Äã","type":1,"pageTitle":"Token Program","url":"token#example-transferring-tokens-to-another-user-with-sender-funding","content":"If the receiver does not yet have an associated token account, the sender may choose to fund the receiver's account. The receiver obtains their wallet address by running solana address and provides it to the sender. The sender then runs to fund the receiver's associated token account, at the sender's expense, and then transfers 50 tokens into it: CLIJS $ spl-token transfer --fund-recipient AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg Transfer 50 tokens Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg Recipient associated token account: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks Funding recipient: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks (0.00203928 SOL) Signature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd Copy "},{"title":"Example: Transferring tokens to an explicit recipient token account‚Äã","type":1,"pageTitle":"Token Program","url":"token#example-transferring-tokens-to-an-explicit-recipient-token-account","content":"Tokens may be transferred to a specific recipient token account. The recipient token account must already exist and be of the same Token type. CLIJS $ spl-token create-account AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM /path/to/auxiliary_keypair.json Creating account CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ Signature: 4yPWj22mbyLu5mhfZ5WATNfYzTt5EQ7LGzryxM7Ufu7QCVjTE7czZdEBqdKR7vjKsfAqsBdjU58NJvXrTqCXvfWW Copy $ spl-token accounts AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM -v Account Token Balance -------------------------------------------------------------------------------------------------------- 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 100 CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 0 (Aux-1*) Copy $ spl-token transfer 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi 50 CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ Transfer 50 tokens Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi Recipient: CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ Signature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd Copy $ spl-token accounts AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM -v Account Token Balance -------------------------------------------------------------------------------------------------------- 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 (Aux-1*) Copy "},{"title":"Example: Create a non-fungible token‚Äã","type":1,"pageTitle":"Token Program","url":"token#example-create-a-non-fungible-token","content":"Create the token type with zero decimal place, CLIJS $ spl-token create-token --decimals 0 Creating token 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z Signature: 4kz82JUey1B9ki1McPW7NYv1NqPKCod6WNptSkYqtuiEsQb9exHaktSAHJJsm4YxuGNW4NugPJMFX9ee6WA2dXts Copy then create an account to hold tokens of this new type: CLIJS $ spl-token create-account 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z Creating account 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM Signature: sjChze6ecaRtvuQVZuwURyg6teYeiH8ZwT6UTuFNKjrdayQQ3KNdPB7d2DtUZ6McafBfEefejHkJ6MWQEfVHLtC Copy Now mint only one token into the account, CLIJS $ spl-token mint 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z 1 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM Minting 1 tokens Token: 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z Recipient: 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM Signature: 2Kzg6ZArQRCRvcoKSiievYy3sfPqGV91Whnz6SeimhJQXKBTYQf3E54tWg3zPpYLbcDexxyTxnj4QF69ucswfdY Copy and disable future minting: $ spl-token authorize 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z mint --disable Updating 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z Current mint authority: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg New mint authority: disabled Signature: 5QpykLzZsceoKcVRRFow9QCdae4Dp2zQAcjebyEWoezPFg2Np73gHKWQicHG1mqRdXu3yiZbrft3Q8JmqNRNqhwU Copy Note: Not currently available in the js/ts library Now the 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM account holds the one and only 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z token: CLIJS $ spl-token account-info 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z Address: 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM Balance: 1 Mint: 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z Owner: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg State: Initialized Delegation: (not set) Close authority: (not set) Copy $ spl-token supply 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z 1 Copy "},{"title":"Multisig usage‚Äã","type":1,"pageTitle":"Token Program","url":"token#multisig-usage","content":"CLIJS The main difference in spl-token command line usage when referencing multisig accounts is in specifying the --owner argument. Typically the signer specified by this argument directly provides a signature granting its authority, but in the multisig case it just points to the address of the multisig account. Signatures are then provided by the multisig signer-set members specified by the--multisig-signer argument. Multisig accounts can be used for any authority on an SPL Token mint or token account. Mint account mint authority:spl-token mint ...,spl-token authorize ... mint ...Mint account freeze authority:spl-token freeze ...,spl-token thaw ...,spl-token authorize ... freeze ...Token account owner authority:spl-token transfer ...,spl-token approve ...,spl-token revoke ...,spl-token burn ...,spl-token wrap ...,spl-token unwrap ...,spl-token authorize ... owner ...Token account close authority:spl-token close ...,spl-token authorize ... close ... "},{"title":"Example: Mint with multisig authority‚Äã","type":1,"pageTitle":"Token Program","url":"token#example-mint-with-multisig-authority","content":"First create keypairs to act as the multisig signer-set. In reality, these can be any supported signer, like: a Ledger hardware wallet, a keypair file, or a paper wallet. For convenience, generated keypairs will be used in this example. CLIJS $ for i in $(seq 3); do solana-keygen new --no-passphrase -so &quot;signer-${i}.json&quot;; done Wrote new keypair to signer-1.json Wrote new keypair to signer-2.json Wrote new keypair to signer-3.json Copy In order to create the multisig account, the public keys of the signer-set must be collected. CLIJS $ for i in $(seq 3); do SIGNER=&quot;signer-${i}.json&quot;; echo &quot;$SIGNER: $(solana-keygen pubkey &quot;$SIGNER&quot;)&quot;; done signer-1.json: BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ signer-2.json: DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY signer-3.json: D7ssXHrZJjfpZXsmDf8RwfPxe1BMMMmP1CtmX3WojPmG Copy Now the multisig account can be created with the spl-token create-multisigsubcommand. Its first positional argument is the minimum number of signers (M) that must sign a transaction affecting a token/mint account that is controlled by this multisig account. The remaining positional arguments are the public keys of all keypairs allowed (N) to sign for the multisig account. This example will use a &quot;2 of 3&quot; multisig account. That is, two of the three allowed keypairs must sign all transactions. NOTE: SPL Token Multisig accounts are limited to a signer-set of eleven signers (1 &lt;= N &lt;= 11) and minimum signers must be no more than N (1 &lt;= M &lt;= N) CLIJS $ spl-token create-multisig 2 BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\ DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY D7ssXHrZJjfpZXsmDf8RwfPxe1BMMMmP1CtmX3WojPmG Copy Creating 2/3 multisig 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re Signature: 2FN4KXnczAz33SAxwsuevqrD1BvikP6LUhLie5Lz4ETt594X8R7yvMZzZW2zjmFLPsLQNHsRuhQeumExHbnUGC9A Copy Next create the token mint and receiving accountsas previously describedand set the mint account's minting authority to the multisig account CLIJS $ spl-token create-token Creating token 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Signature: 3n6zmw3hS5Hyo5duuhnNvwjAbjzC42uzCA3TTsrgr9htUonzDUXdK1d8b8J77XoeSherqWQM8mD8E1TMYCpksS2r $ spl-token create-account 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Creating account EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC Signature: 5mVes7wjE7avuFqzrmSCWneKBQyPAjasCLYZPNSkmqmk2YFosYWAP9hYSiZ7b7NKpV866x5gwyKbbppX3d8PcE9s $ spl-token authorize 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o mint 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re Updating 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Current mint authority: 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE New mint authority: 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re Signature: yy7dJiTx1t7jvLPCRX5RQWxNRNtFwvARSfbMJG94QKEiNS4uZcp3GhhjnMgZ1CaWMWe4jVEMy9zQBoUhzomMaxC Copy To demonstrate that the mint account is now under control of the multisig account, attempting to mint with one multisig signer fails CLIJS $ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\ --owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\ --multisig-signer signer-1.json Copy Minting 1 tokens Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC RPC response error -32002: Transaction simulation failed: Error processing Instruction 0: missing required signature for instruction Copy But repeating with a second multisig signer, succeeds CLIJS $ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\ --owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\ --multisig-signer signer-1.json \\ --multisig-signer signer-2.json Copy Minting 1 tokens Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC Signature: 2ubqWqZb3ooDuc8FLaBkqZwzguhtMgQpgMAHhKsWcUzjy61qtJ7cZ1bfmYktKUfnbMYWTC1S8zdKgU6m4THsgspT Copy "},{"title":"Example: Offline signing with multisig‚Äã","type":1,"pageTitle":"Token Program","url":"token#example-offline-signing-with-multisig","content":"Sometimes online signing is not possible or desireable. Such is the case for example when signers are not in the same geographic location or when they use air-gapped devices not connected to the network. In this case, we use offline signing which combines the previous examples of multisig with offline signingand a nonce account. This example will use the same mint account, token account, multisig account, and multisig signer-set keypair filenames as the online example, as well as a nonce account that we create here: CLIJS $ solana-keygen new -o nonce-keypair.json ... ====================================================================== pubkey: Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj ====================================================================== Copy $ solana create-nonce-account nonce-keypair.json 1 Signature: 3DALwrAAmCDxqeb4qXZ44WjpFcwVtgmJKhV4MW5qLJVtWeZ288j6Pzz1F4BmyPpnGLfx2P8MEJXmqPchX5y2Lf3r Copy $ solana nonce-account Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj Balance: 0.01 SOL Minimum Balance Required: 0.00144768 SOL Nonce blockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E Fee: 5000 lamports per signature Authority: 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE Copy For the fee-payer and nonce-authority roles, a local hot wallet at5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE will be used. CLIJS First a template command is built by specifying all signers by their public key. Upon running this command, all signers will be listed as &quot;Absent Signers&quot; in the output. This command will be run by each offline signer to generate the corresponding signature. NOTE: The argument to the --blockhash parameter is the &quot;Nonce blockhash:&quot; field from the designated durable nonce account. $ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\ --owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\ --multisig-signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\ --multisig-signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY \\ --blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\ --fee-payer 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\ --nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\ --nonce-authority 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\ --sign-only \\ --mint-decimals 9 Copy Minting 1 tokens Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC Blockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E Absent Signers (Pubkey): 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY Copy Next each offline signer executes the template command, replacing each instance of their public key with the corresponding keypair. $ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\ --owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\ --multisig-signer signer-1.json \\ --multisig-signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY \\ --blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\ --fee-payer 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\ --nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\ --nonce-authority 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\ --sign-only \\ --mint-decimals 9 Copy Minting 1 tokens Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC Blockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E Signers (Pubkey=Signature): BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ=2QVah9XtvPAuhDB2QwE7gNaY962DhrGP6uy9zeN4sTWvY2xDUUzce6zkQeuT3xg44wsgtUw2H5Rf8pEArPSzJvHX Absent Signers (Pubkey): 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY Copy $ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\ --owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\ --multisig-signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\ --multisig-signer signer-2.json \\ --blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\ --fee-payer 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\ --nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\ --nonce-authority 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\ --sign-only \\ --mint-decimals 9 Copy Minting 1 tokens Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC Blockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E Signers (Pubkey=Signature): DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY=2brZbTiCfyVYSCp6vZE3p7qCDeFf3z1JFmJHPBrz8SnWSDZPjbpjsW2kxFHkktTNkhES3y6UULqS4eaWztLW7FrU Absent Signers (Pubkey): 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ Copy Finally, the offline signers communicate the Pubkey=Signature pair from the output of their command to the party who will broadcast the transaction to the cluster. The broadcasting party then runs the template command after modifying it as follows: Replaces any corresponding public keys with their keypair (--fee-payer ...and --nonce-authority ... in this example)Removes the --sign-only argument, and in the case of the mint subcommand, the --mint-decimals ... argument as it will be queried from the clusterAdds the offline signatures to the template command via the --signer argument $ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\ --owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\ --multisig-signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\ --multisig-signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY \\ --blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\ --fee-payer hot-wallet.json \\ --nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\ --nonce-authority hot-wallet.json \\ --signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ=2QVah9XtvPAuhDB2QwE7gNaY962DhrGP6uy9zeN4sTWvY2xDUUzce6zkQeuT3xg44wsgtUw2H5Rf8pEArPSzJvHX \\ --signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY=2brZbTiCfyVYSCp6vZE3p7qCDeFf3z1JFmJHPBrz8SnWSDZPjbpjsW2kxFHkktTNkhES3y6UULqS4eaWztLW7FrU Copy Minting 1 tokens Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC Signature: 2AhZXVPDBVBxTQLJohyH1wAhkkSuxRiYKomSSXtwhPL9AdF3wmhrrJGD7WgvZjBPLZUFqWrockzPp9S3fvzbgicy Copy "},{"title":"JSON RPC methods‚Äã","type":1,"pageTitle":"Token Program","url":"token#json-rpc-methods","content":"There is a rich set of JSON RPC methods available for use with SPL Token: getTokenAccountBalancegetTokenAccountsByDelegategetTokenAccountsByOwnergetTokenLargestAccountsgetTokenSupply See https://docs.solana.com/apps/jsonrpc-api for more details. Additionally the versatile getProgramAccounts JSON RPC method can be employed in various ways to fetch SPL Token accounts of interest. "},{"title":"Finding all token accounts for a specific mint‚Äã","type":1,"pageTitle":"Token Program","url":"token#finding-all-token-accounts-for-a-specific-mint","content":"To find all token accounts for the TESTpKgj42ya3st2SQTKiANjTBmncQSCqLAZGcSPLGM mint: curl http://api.mainnet-beta.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d ' { &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 1, &quot;method&quot;: &quot;getProgramAccounts&quot;, &quot;params&quot;: [ &quot;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&quot;, { &quot;encoding&quot;: &quot;jsonParsed&quot;, &quot;filters&quot;: [ { &quot;dataSize&quot;: 165 }, { &quot;memcmp&quot;: { &quot;offset&quot;: 0, &quot;bytes&quot;: &quot;TESTpKgj42ya3st2SQTKiANjTBmncQSCqLAZGcSPLGM&quot; } } ] } ] } ' Copy The &quot;dataSize&quot;: 165 filter selects all Token Accounts, and then the &quot;memcmp&quot;: ... filter selects based on themintaddress within each token account. "},{"title":"Finding all token accounts for a wallet‚Äã","type":1,"pageTitle":"Token Program","url":"token#finding-all-token-accounts-for-a-wallet","content":"Find all token accounts owned by the vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg user: curl http://api.mainnet-beta.solana.com -X POST -H &quot;Content-Type: application/json&quot; -d ' { &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;: 1, &quot;method&quot;: &quot;getProgramAccounts&quot;, &quot;params&quot;: [ &quot;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&quot;, { &quot;encoding&quot;: &quot;jsonParsed&quot;, &quot;filters&quot;: [ { &quot;dataSize&quot;: 165 }, { &quot;memcmp&quot;: { &quot;offset&quot;: 32, &quot;bytes&quot;: &quot;vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg&quot; } } ] } ] } Copy The &quot;dataSize&quot;: 165 filter selects all Token Accounts, and then the &quot;memcmp&quot;: ... filter selects based on theowneraddress within each token account. "},{"title":"Operational overview‚Äã","type":1,"pageTitle":"Token Program","url":"token#operational-overview","content":""},{"title":"Creating a new token type‚Äã","type":1,"pageTitle":"Token Program","url":"token#creating-a-new-token-type","content":"A new token type can be created by initializing a new Mint with theInitializeMint instruction. The Mint is used to create or &quot;mint&quot; new tokens, and these tokens are stored in Accounts. A Mint is associated with each Account, which means that the total supply of a particular token type is equal to the balances of all the associated Accounts. It's important to note that the InitializeMint instruction does not require the Solana account being initialized also be a signer. The InitializeMintinstruction should be atomically processed with the system instruction that creates the Solana account by including both instructions in the same transaction. Once a Mint is initialized, the mint_authority can create new tokens using theMintTo instruction. As long as a Mint contains a valid mint_authority, the Mint is considered to have a non-fixed supply, and the mint_authority can create new tokens with the MintTo instruction at any time. The SetAuthorityinstruction can be used to irreversibly set the Mint's authority to None, rendering the Mint's supply fixed. No further tokens can ever be Minted. Token supply can be reduced at any time by issuing a Burn instruction which removes and discards tokens from an Account. "},{"title":"Creating accounts‚Äã","type":1,"pageTitle":"Token Program","url":"token#creating-accounts","content":"Accounts hold token balances and are created using the InitializeAccountinstruction. Each Account has an owner who must be present as a signer in some instructions. An Account's owner may transfer ownership of an account to another using theSetAuthority instruction. It's important to note that the InitializeAccount instruction does not require the Solana account being initialized also be a signer. The InitializeAccountinstruction should be atomically processed with the system instruction that creates the Solana account by including both instructions in the same transaction. "},{"title":"Transferring tokens‚Äã","type":1,"pageTitle":"Token Program","url":"token#transferring-tokens","content":"Balances can be transferred between Accounts using the Transfer instruction. The owner of the source Account must be present as a signer in the Transferinstruction when the source and destination accounts are different. It's important to note that when the source and destination of a Transfer are the same, the Transfer will always succeed. Therefore, a successful Transferdoes not necessarily imply that the involved Accounts were valid SPL Token accounts, that any tokens were moved, or that the source Account was present as a signer. We strongly recommend that developers are careful about checking that the source and destination are different before invoking a Transferinstruction from within their program. "},{"title":"Burning‚Äã","type":1,"pageTitle":"Token Program","url":"token#burning","content":"The Burn instruction decreases an Account's token balance without transferring to another Account, effectively removing the token from circulation permanently. There is no other way to reduce supply on chain. This is similar to transferring to an account with unknown private key or destroying a private key. But the act of burning by using Burn instructions is more explicit and can be confirmed on chain by any parties. "},{"title":"Authority delegation‚Äã","type":1,"pageTitle":"Token Program","url":"token#authority-delegation","content":"Account owners may delegate authority over some or all of their token balance using the Approve instruction. Delegated authorities may transfer or burn up to the amount they've been delegated. Authority delegation may be revoked by the Account's owner via the Revoke instruction. "},{"title":"Multisignatures‚Äã","type":1,"pageTitle":"Token Program","url":"token#multisignatures","content":"M of N multisignatures are supported and can be used in place of Mint authorities or Account owners or delegates. Multisignature authorities must be initialized with the InitializeMultisig instruction. Initialization specifies the set of N public keys that are valid and the number M of those N that must be present as instruction signers for the authority to be legitimate. It's important to note that the InitializeMultisig instruction does not require the Solana account being initialized also be a signer. TheInitializeMultisig instruction should be atomically processed with the system instruction that creates the Solana account by including both instructions in the same transaction. "},{"title":"Freezing accounts‚Äã","type":1,"pageTitle":"Token Program","url":"token#freezing-accounts","content":"The Mint may also contain a freeze_authority which can be used to issueFreezeAccount instructions that will render an Account unusable. Token instructions that include a frozen account will fail until the Account is thawed using the ThawAccount instruction. The SetAuthority instruction can be used to change a Mint's freeze_authority. If a Mint's freeze_authority is set toNone then account freezing and thawing is permanently disabled and all currently frozen accounts will also stay frozen permanently. "},{"title":"Wrapping SOL‚Äã","type":1,"pageTitle":"Token Program","url":"token#wrapping-sol","content":"The Token Program can be used to wrap native SOL. Doing so allows native SOL to be treated like any other Token program token type and can be useful when being called from other programs that interact with the Token Program's interface. Accounts containing wrapped SOL are associated with a specific Mint called the &quot;Native Mint&quot; using the public keySo11111111111111111111111111111111111111112. These accounts have a few unique behaviors InitializeAccount sets the balance of the initialized Account to the SOL balance of the Solana account being initialized, resulting in a token balance equal to the SOL balance.Transfers to and from not only modify the token balance but also transfer an equal amount of SOL from the source account to the destination account.Burning is not supportedWhen closing an Account the balance may be non-zero. The Native Mint supply will always report 0, regardless of how much SOL is currently wrapped. "},{"title":"Rent-exemption‚Äã","type":1,"pageTitle":"Token Program","url":"token#rent-exemption","content":"To ensure a reliable calculation of supply, a consistency valid Mint, and consistently valid Multisig accounts all Solana accounts holding an Account, Mint, or Multisig must contain enough SOL to be considered rent exempt "},{"title":"Closing accounts‚Äã","type":1,"pageTitle":"Token Program","url":"token#closing-accounts","content":"An account may be closed using the CloseAccount instruction. When closing an Account, all remaining SOL will be transferred to another Solana account (doesn't have to be associated with the Token Program). Non-native Accounts must have a balance of zero to be closed. "},{"title":"Non-Fungible tokens‚Äã","type":1,"pageTitle":"Token Program","url":"token#non-fungible-tokens","content":"An NFT is simply a token type where only a single token has been minted. "},{"title":"Wallet Integration Guide‚Äã","type":1,"pageTitle":"Token Program","url":"token#wallet-integration-guide","content":"This section describes how to integrate SPL Token support into an existing wallet supporting native SOL. It assumes a model whereby the user has a single system account as their main wallet address that they send and receive SOL from. Although all SPL Token accounts do have their own address on-chain, there's no need to surface these additional addresses to the user. There are two programs that are used by the wallet: SPL Token program: generic program that is used by all SPL TokensSPL Associated Token Account program: defines the convention and provides the mechanism for mapping the user's wallet address to the associated token accounts they hold. "},{"title":"How to fetch and display token holdings‚Äã","type":1,"pageTitle":"Token Program","url":"token#how-to-fetch-and-display-token-holdings","content":"The getTokenAccountsByOwnerJSON RPC method can be used to fetch all token accounts for a wallet address. For each token mint, the wallet could have multiple token accounts: the associated token account and/or other ancillary token accounts By convention it is suggested that wallets roll up the balances from all token accounts of the same token mint into a single balance for the user to shield the user from this complexity. See the Garbage Collecting Ancillary Token Accountssection for suggestions on how the wallet should clean up ancillary token accounts on the user's behalf. "},{"title":"Associated Token Account‚Äã","type":1,"pageTitle":"Token Program","url":"token#associated-token-account","content":"Before the user can receive tokens, their associated token account must be created on-chain, requiring a small amount of SOL to mark the account as rent-exempt. There's no restriction on who can create a user's associated token account. It could either be created by the wallet on behalf of the user or funded by a 3rd party through an airdrop campaign. The creation process is described here. It's highly recommended that the wallet create the associated token account for a given SPL Token itself before indicating to the user that they are able to receive that SPL Tokens type (typically done by showing the user their receiving address). A wallet that chooses to not perform this step may limit its user's ability to receive SPL Tokens from other wallets. Sample &quot;Add Token&quot; workflow‚Äã The user should first fund their associated token account when they want to receive SPL Tokens of a certain type to: Maximize interoperability with other wallet implementationsAvoid pushing the cost of creating their associated token account on the first sender The wallet should provide a UI that allow the users to &quot;add a token&quot;. The user selects the kind of token, and is presented with information about how much SOL it will cost to add the token. Upon confirmation, the wallet creates the associated token type as the describedhere. Sample &quot;Airdrop campaign&quot; workflow‚Äã For each recipient wallet addresses, send a transaction containing: Create the associated token account on the recipient's behalf.Use TokenInstruction::Transfer to complete the transfer Associated Token Account Ownership‚Äã ‚ö†Ô∏è The wallet should never use TokenInstruction::SetAuthority to set theAccountOwner authority of the associated token account to another address. "},{"title":"Ancillary Token Accounts‚Äã","type":1,"pageTitle":"Token Program","url":"token#ancillary-token-accounts","content":"At any time ownership of an existing SPL Token account may be assigned to the user. One way to accomplish this is with thespl-token authorize &lt;TOKEN_ADDRESS&gt; owner &lt;USER_ADDRESS&gt; command. Wallets should be prepared to gracefully manage token accounts that they themselves did not create for the user. "},{"title":"Transferring Tokens Between Wallets‚Äã","type":1,"pageTitle":"Token Program","url":"token#transferring-tokens-between-wallets","content":"The preferred method of transferring tokens between wallets is to transfer into associated token account of the recipient. The recipient must provide their main wallet address to the sender. The sender then: Derives the associated token account for the recipientFetches the recipient's associated token account over RPC and checks that it existsIf the recipient's associated token account does not yet exist, the sender wallet should create the recipient's associated token account as describedhere. The sender's wallet may choose to inform the user that as a result of account creation the transfer will require more SOL than normal. However a wallet that chooses to not support creating the recipient's associated token account at this time should present a message to the user with enough information to permit them to find a workaround (such as transferring the token through a fully compliant intermediary wallet such as https://sollet.io) to allow the users to accomplish their goalUse TokenInstruction::Transfer to complete the transfer The sender's wallet must not require that the recipient's main wallet address hold a balance before allowing the transfer. "},{"title":"Registry for token details‚Äã","type":1,"pageTitle":"Token Program","url":"token#registry-for-token-details","content":"At the moment there exist two solutions for Token Mint registries: hard coded addresses in the wallet or dappspl-token-registrypackage, maintained at https://github.com/solana-labs/token-list A decentralized solution is in progress. "},{"title":"Garbage Collecting Ancillary Token Accounts‚Äã","type":1,"pageTitle":"Token Program","url":"token#garbage-collecting-ancillary-token-accounts","content":"Wallets should empty ancillary token accounts as quickly as practical by transferring into the user's associated token account. This effort serves two purposes: If the user is the close authority for the ancillary account, the wallet can reclaim SOL for the user by closing the account.If the ancillary account was funded by a 3rd party, once the account is emptied that 3rd party may close the account and reclaim the SOL. One natural time to garbage collect ancillary token accounts is when the user next sends tokens. The additional instructions to do so can be added to the existing transaction, and will not require an additional fee. Cleanup Pseudo Steps: For all non-empty ancillary token accounts, add aTokenInstruction::Transfer instruction to the transfer the full token amount to the user's associated token account.For all empty ancillary token accounts where the user is the close authority, add a TokenInstruction::CloseAccount instruction If adding one or more of clean up instructions cause the transaction to exceed the maximum allowed transaction size, remove those extra clean up instructions. They can be cleaned up during the next send operation. The spl-token gc command provides an example implementation of this cleanup process. "},{"title":"Token Vesting Contract:‚Äã","type":1,"pageTitle":"Token Program","url":"token#token-vesting-contract","content":"This program allows you to lock arbitrary SPL tokens and release the locked tokens with a determined unlock schedule. An unlock schedule is made of a unix timestamp and a token amount, when initializing a vesting contract, the creator can pass an array of unlock schedule with an arbitrary size giving the creator of the contract complete control of how the tokens unlock over time. Unlocking works by pushing a permissionless crank on the contract that moves the tokens to the pre-specified address. The recipient address of a vesting contract can be modified by the owner of the current recipient key, meaning that vesting contract locked tokens can be traded. Code: https://github.com/Bonfida/token-vestingUI: https://vesting.bonfida.com/#/Audit: The audit was conducted by Kudelski, the report can be found here "}]