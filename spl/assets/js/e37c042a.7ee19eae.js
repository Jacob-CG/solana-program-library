"use strict";(self.webpackChunksolana_spl_docs=self.webpackChunksolana_spl_docs||[]).push([[744],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,k=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return t?a.createElement(k,l(l({ref:n},u),{},{components:t})):a.createElement(k,l({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=d;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var c=2;c<i;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9443:function(e,n,t){var a=(0,t(7294).createContext)(void 0);n.Z=a},5863:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return y},default:function(){return N},frontMatter:function(){return f},metadata:function(){return b},toc:function(){return T}});var a=t(7462),o=t(3366),i=t(7294),l=t(3905),r=t(2389),s=t(9443);var c=function(){var e=(0,i.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},u=t(9521),p=t(6010),d="tabItem_vU9c";function m(e){var n,t,a,o=e.lazy,l=e.block,r=e.defaultValue,s=e.values,m=e.groupId,k=e.className,g=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=s?s:g.map((function(e){var n=e.props;return{value:n.value,label:n.label}})),f=(0,u.lx)(h,(function(e,n){return e.value===n.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===r?r:null!=(n=null!=r?r:null==(t=g.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(a=g[0])?void 0:a.props.value;if(null!==y&&!h.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=c(),T=b.tabGroupChoices,w=b.setTabGroupChoices,N=(0,i.useState)(y),v=N[0],A=N[1],C=[],x=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var S=T[m];null!=S&&S!==v&&h.some((function(e){return e.value===S}))&&A(S)}var K=function(e){var n=e.currentTarget,t=C.indexOf(n),a=h[t].value;a!==v&&(x(n),A(a),null!=m&&w(m,a))},P=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=C.indexOf(e.currentTarget)+1;t=C[a]||C[0];break;case"ArrowLeft":var o=C.indexOf(e.currentTarget)-1;t=C[o]||C[C.length-1]}null==(n=t)||n.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":l},k)},h.map((function(e){var n=e.value,t=e.label;return i.createElement("li",{role:"tab",tabIndex:v===n?0:-1,"aria-selected":v===n,className:(0,p.Z)("tabs__item",d,{"tabs__item--active":v===n}),key:n,ref:function(e){return C.push(e)},onKeyDown:P,onFocus:K,onClick:K},null!=t?t:n)}))),o?(0,i.cloneElement)(g.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},g.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==v})}))))}function k(e){var n=(0,r.Z)();return i.createElement(m,(0,a.Z)({key:String(n)},e))}var g=function(e){var n=e.children,t=e.hidden,a=e.className;return i.createElement("div",{role:"tabpanel",hidden:t,className:a},n)},h=["components"],f={title:"Token Program"},y=void 0,b={unversionedId:"token",id:"token",isDocsHomePage:!1,title:"Token Program",description:"A Token program on the Solana blockchain.",source:"@site/src/token.mdx",sourceDirName:".",slug:"/token",permalink:"/solana-program-library/spl/token",tags:[],version:"current",frontMatter:{title:"Token Program"},sidebar:"docs",previous:{title:"Introduction",permalink:"/solana-program-library/spl/"},next:{title:"Token Swap Program",permalink:"/solana-program-library/spl/token-swap"}},T=[{value:"Background",id:"background",children:[],level:2},{value:"Source",id:"source",children:[],level:2},{value:"Interface",id:"interface",children:[],level:2},{value:"Reference Guide",id:"reference-guide",children:[{value:"Setup",id:"setup",children:[],level:3},{value:"Configuration",id:"configuration",children:[{value:"Current Configuration",id:"current-configuration",children:[],level:4},{value:"Cluster RPC URL",id:"cluster-rpc-url",children:[],level:4},{value:"Default Keypair",id:"default-keypair",children:[],level:4},{value:"Yarn",id:"yarn",children:[],level:4},{value:"npm",id:"npm",children:[],level:4},{value:"Browser bundle",id:"browser-bundle",children:[],level:4}],level:3},{value:"Configuration",id:"configuration-1",children:[],level:3},{value:"Keypair",id:"keypair",children:[{value:"Airdrop SOL",id:"airdrop-sol",children:[],level:4}],level:3},{value:"Example: Creating your own fungible token",id:"example-creating-your-own-fungible-token",children:[],level:3},{value:"Example: View all Tokens that you own",id:"example-view-all-tokens-that-you-own",children:[],level:3},{value:"Example: Wrapping SOL in a Token",id:"example-wrapping-sol-in-a-token",children:[],level:3},{value:"Example: Transferring tokens to another user",id:"example-transferring-tokens-to-another-user",children:[],level:3},{value:"Example: Transferring tokens to another user, with sender-funding",id:"example-transferring-tokens-to-another-user-with-sender-funding",children:[],level:3},{value:"Example: Transferring tokens to an explicit recipient token account",id:"example-transferring-tokens-to-an-explicit-recipient-token-account",children:[],level:3},{value:"Example: Create a non-fungible token",id:"example-create-a-non-fungible-token",children:[],level:3},{value:"Multisig usage",id:"multisig-usage",children:[],level:3},{value:"Example: Mint with multisig authority",id:"example-mint-with-multisig-authority",children:[],level:3},{value:"Example: Offline signing with multisig",id:"example-offline-signing-with-multisig",children:[],level:3}],level:2},{value:"JSON RPC methods",id:"json-rpc-methods",children:[{value:"Finding all token accounts for a specific mint",id:"finding-all-token-accounts-for-a-specific-mint",children:[],level:3},{value:"Finding all token accounts for a wallet",id:"finding-all-token-accounts-for-a-wallet",children:[],level:3}],level:2},{value:"Operational overview",id:"operational-overview",children:[{value:"Creating a new token type",id:"creating-a-new-token-type",children:[],level:3},{value:"Creating accounts",id:"creating-accounts",children:[],level:3},{value:"Transferring tokens",id:"transferring-tokens",children:[],level:3},{value:"Burning",id:"burning",children:[],level:3},{value:"Authority delegation",id:"authority-delegation",children:[],level:3},{value:"Multisignatures",id:"multisignatures",children:[],level:3},{value:"Freezing accounts",id:"freezing-accounts",children:[],level:3},{value:"Wrapping SOL",id:"wrapping-sol",children:[],level:3},{value:"Rent-exemption",id:"rent-exemption",children:[],level:3},{value:"Closing accounts",id:"closing-accounts",children:[],level:3},{value:"Non-Fungible tokens",id:"non-fungible-tokens",children:[],level:3}],level:2},{value:"Wallet Integration Guide",id:"wallet-integration-guide",children:[{value:"How to fetch and display token holdings",id:"how-to-fetch-and-display-token-holdings",children:[],level:3},{value:"Associated Token Account",id:"associated-token-account",children:[{value:"Sample &quot;Add Token&quot; workflow",id:"sample-add-token-workflow",children:[],level:4},{value:"Sample &quot;Airdrop campaign&quot; workflow",id:"sample-airdrop-campaign-workflow",children:[],level:4},{value:"Associated Token Account Ownership",id:"associated-token-account-ownership",children:[],level:4}],level:3},{value:"Ancillary Token Accounts",id:"ancillary-token-accounts",children:[],level:3},{value:"Transferring Tokens Between Wallets",id:"transferring-tokens-between-wallets",children:[],level:3},{value:"Registry for token details",id:"registry-for-token-details",children:[],level:3},{value:"Garbage Collecting Ancillary Token Accounts",id:"garbage-collecting-ancillary-token-accounts",children:[],level:3},{value:"Token Vesting Contract:",id:"token-vesting-contract",children:[],level:3}],level:2}],w={toc:T};function N(e){var n=e.components,t=(0,o.Z)(e,h);return(0,l.kt)("wrapper",(0,a.Z)({},w,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"A Token program on the Solana blockchain."),(0,l.kt)("p",null,"This program defines a common implementation for Fungible and Non Fungible tokens."),(0,l.kt)("h2",{id:"background"},"Background"),(0,l.kt)("p",null,"Solana's programming model and the definitions of the Solana terms used in this\ndocument are available at:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://docs.solana.com/apps"},"https://docs.solana.com/apps")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://docs.solana.com/terminology"},"https://docs.solana.com/terminology"))),(0,l.kt)("h2",{id:"source"},"Source"),(0,l.kt)("p",null,"The Token Program's source is available on\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/solana-labs/solana-program-library"},"github")),(0,l.kt)("h2",{id:"interface"},"Interface"),(0,l.kt)("p",null,"The Token Program is written in Rust and available on ",(0,l.kt)("a",{parentName:"p",href:"https://crates.io/crates/spl-token"},"crates.io")," and ",(0,l.kt)("a",{parentName:"p",href:"https://docs.rs/spl-token"},"docs.rs"),"."),(0,l.kt)("p",null,"Auto-generated C bindings are also available\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/solana-labs/solana-program-library/blob/master/token/program/inc/token.h"},"here")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js"},"JavaScript\nbindings"),"\nare available that support loading the Token Program on to a chain and issue\ninstructions."),(0,l.kt)("p",null,"See the ",(0,l.kt)("a",{parentName:"p",href:"/solana-program-library/spl/associated-token-account"},"SPL Associated Token Account")," program for\nconvention around wallet address to token account mapping and funding."),(0,l.kt)("h2",{id:"reference-guide"},"Reference Guide"),(0,l.kt)("h3",{id:"setup"},"Setup"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"spl-token")," command-line utility can be used to experiment with SPL\ntokens.  Once you have ",(0,l.kt)("a",{parentName:"p",href:"https://rustup.rs/"},"Rust installed"),", run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo install spl-token-cli\n")),(0,l.kt)("p",null,"Run ",(0,l.kt)("inlineCode",{parentName:"p"},"spl-token --help")," for a full description of available commands."),(0,l.kt)("h3",{id:"configuration"},"Configuration"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"spl-token")," configuration is shared with the ",(0,l.kt)("inlineCode",{parentName:"p"},"solana")," command-line tool."),(0,l.kt)("h4",{id:"current-configuration"},"Current Configuration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ solana config get\nConfig File: ${HOME}/.config/solana/cli/config.yml\nRPC URL: https://api.mainnet-beta.solana.com\nWebSocket URL: wss://api.mainnet-beta.solana.com/ (computed)\nKeypair Path: ${HOME}/.config/solana/id.json\n")),(0,l.kt)("h4",{id:"cluster-rpc-url"},"Cluster RPC URL"),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"https://docs.solana.com/clusters"},"Solana clusters")," for cluster-specific RPC URLs"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ solana config set --url https://api.devnet.solana.com\n")),(0,l.kt)("h4",{id:"default-keypair"},"Default Keypair"),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"https://docs.solana.com/cli/conventions#keypair-conventions"},"Keypair conventions"),"\nfor information on how to setup a keypair if you don't already have one."),(0,l.kt)("p",null,"Keypair File"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ solana config set --keypair ${HOME}/new-keypair.json\n")),(0,l.kt)("p",null,"Hardware Wallet URL (See ",(0,l.kt)("a",{parentName:"p",href:"https://docs.solana.com/wallet-guide/hardware-wallets#specify-a-keypair-url"},"URL spec"),")"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ solana config set --keypair usb://ledger/\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("h4",{id:"yarn"},"Yarn"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"yarn add @solana/spl-token\n")),(0,l.kt)("h4",{id:"npm"},"npm"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"npm install @solana/spl-token\n")),(0,l.kt)("h4",{id:"browser-bundle"},"Browser bundle"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<script src="https://unpkg.com/@solana/spl-token@latest/lib/index.life.min.js"><\/script>\n')),(0,l.kt)("h3",{id:"configuration-1"},"Configuration"),(0,l.kt)("p",null,"You can connect to different clusters using ",(0,l.kt)("inlineCode",{parentName:"p"},"Connection")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"@solana/web3.js")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const web3 = require('@solana/web3.js');\nconst connection = new web3.Connection(web3.clusterApiUrl('devnet'), 'confirmed');\n")),(0,l.kt)("h3",{id:"keypair"},"Keypair"),(0,l.kt)("p",null,"You can either get your keypair using ",(0,l.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/classes/Keypair.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Keypair"))," from ",(0,l.kt)("inlineCode",{parentName:"p"},"@solana/web3.js"),", or let the user's wallet handle the keypair and use ",(0,l.kt)("inlineCode",{parentName:"p"},"sendTransaction")," from ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/solana-labs/wallet-adapter"},(0,l.kt)("inlineCode",{parentName:"a"},"wallet-adapter"))))),(0,l.kt)("h4",{id:"airdrop-sol"},"Airdrop SOL"),(0,l.kt)("p",null,"Creating tokens and accounts requires SOL for account rent deposits and\ntransaction fees. If the cluster you are targeting offers a faucet, you can get\na little SOL for testing:"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ solana airdrop 1\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { clusterApiUrl, Connection, Keypair, LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nconst payer = Keypair.generate();\n\nconst connection = new Connection(\n  clusterApiUrl('devnet'),\n  'confirmed'\n);\n\nconst airdropSignature = await connection.requestAirdrop(\n  payer.publicKey,\n  LAMPORTS_PER_SOL,\n);\n\nawait connection.confirmTransaction(airdropSignature);\n")))),(0,l.kt)("h3",{id:"example-creating-your-own-fungible-token"},"Example: Creating your own fungible token"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token create-token\nCreating token AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\nSignature: 47hsLFxWRCg8azaZZPSnQR8DNTRsGyPNfUK7jqyzgt7wf9eag3nSnewqoZrVZHKm8zt3B6gzxhr91gdQ5qYrsRG4\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createMint } from '@solana/spl-token';\nimport { clusterApiUrl, Connection, Keypair, LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nconst payer = Keypair.generate();\nconst mintAuthority = Keypair.generate();\nconst freezeAuthority = Keypair.generate();\n\nconst connection = new Connection(\n  clusterApiUrl('devnet'),\n  'confirmed'\n);\n\nconst mint = await createMint(\n  connection,\n  payer,\n  mintAuthority.publicKey,\n  freezeAuthority.publicKey,\n  9\n);\n\nconsole.log(mint.toBase58());\n// AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\n")))),(0,l.kt)("p",null,"The unique identifier of the token is ",(0,l.kt)("inlineCode",{parentName:"p"},"AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM"),"."),(0,l.kt)("p",null,"Tokens when initially created by ",(0,l.kt)("inlineCode",{parentName:"p"},"spl-token")," have no supply:"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token supply AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\n0\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const mintInfo = await getMintInfo(\n  connection,\n  mint\n)\n\nconsole.log(mintInfo.supply);\n// 0\n")))),(0,l.kt)("p",null,"Let's mint some.  First create an account to hold a balance of the new\n",(0,l.kt)("inlineCode",{parentName:"p"},"AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM")," token:"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token create-account AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\nCreating account 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi\nSignature: 42Sa5eK9dMEQyvD9GMHuKxXf55WLZ7tfjabUKDhNoZRAxj9MsnN7omriWMEHXLea3aYpjZ862qocRLVikvkHkyfy\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const tokenAccount = await getOrCreateAssociatedTokenAccount(\n  connection,\n  payer,\n  mint,\n  payer.publicKey\n)\n\nconsole.log(tokenAccount.address.toBase58());\n// 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi\n")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi")," is now an empty account:"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token balance AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\n0\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const tokenAccountInfo = await getAccountInfo(\n  connection,\n  tokenAccount.address\n)\n\nconsole.log(tokenAccountInfo.amount);\n// 0\n")))),(0,l.kt)("p",null,"Mint 100 tokens into the account:"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token mint AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 100\nMinting 100 tokens\n  Token: AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\n  Recipient: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi\nSignature: 41mARH42fPkbYn1mvQ6hYLjmJtjW98NXwd6pHqEYg9p8RnuoUsMxVd16RkStDHEzcS2sfpSEpFscrJQn3HkHzLaa\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"await mintTo(\n  connection,\n  payer,\n  mint,\n  tokenAccount.address,\n  mintAuthority,\n  100\n)\n")))),(0,l.kt)("p",null,"The token ",(0,l.kt)("inlineCode",{parentName:"p"},"supply")," and account ",(0,l.kt)("inlineCode",{parentName:"p"},"balance")," now reflect the result of minting:"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token supply AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\n100\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token balance AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM\n100\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const mintInfo = await getMintInfo(\n  connection,\n  mint\n)\n\nconsole.log(mintInfo.supply);\n// 100\n\nconst tokenAccountInfo = await getAccountInfo(\n  connection,\n  tokenAccount.address\n)\n\nconsole.log(tokenAccountInfo.amount);\n// 100\n")))),(0,l.kt)("h3",{id:"example-view-all-tokens-that-you-own"},"Example: View all Tokens that you own"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token accounts\nToken                                         Balance\n------------------------------------------------------------\n7e2X5oeAAJyUTi4PfSGXFLGhyPw2H8oELm1mx87ZCgwF  84\nAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  100\nAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  0    (Aux-1*)\nAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  1    (Aux-2*)\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'import {AccountLayout, TOKEN_PROGRAM_ID} from "@solana/spl-token";\nimport {clusterApiUrl, Connection, PublicKey} from "@solana/web3.js";\n\n(async () => {\n\n  const connection = new Connection(clusterApiUrl(\'devnet\'), \'confirmed\');\n\n  const tokenAccounts = await connection.getTokenAccountsByOwner(\n    new PublicKey(\'8YLKoCu7NwqHNS8GzuvA2ibsvLrsg22YMfMDafxh1B15\'),\n    {\n      programId: TOKEN_PROGRAM_ID,\n    }\n  );\n\n  console.log("Token                                         Balance");\n  console.log("------------------------------------------------------------");\n  tokenAccounts.value.forEach((e) => {\n    const accountInfo = AccountLayout.decode(e.account.data);\n    console.log(`${new PublicKey(accountInfo.mint)}   ${accountInfo.amount}`);\n  })\n\n})();\n\n/*\nToken                                         Balance\n------------------------------------------------------------\n7e2X5oeAAJyUTi4PfSGXFLGhyPw2H8oELm1mx87ZCgwF  84\nAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  100\nAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  0\nAQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  1\n*/\n')))),(0,l.kt)("h3",{id:"example-wrapping-sol-in-a-token"},"Example: Wrapping SOL in a Token"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token wrap 1\nWrapping 1 SOL into GJTxcnA5Sydy8YRhqvHxbQ5QNsPyRKvzguodQEaShJje\nSignature: 4f4s5QVMKisLS6ihZcXXPbiBAzjnvkBcp2A7KKER7k9DwJ4qjbVsQBKv2rAyBumXC1gLn8EJQhwWkybE4yJGnw2Y\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import {NATIVE_MINT, createAssociatedTokenAccountInstruction, getAssociatedTokenAddress, createSyncNativeInstruction, getAccountInfo} from \"@solana/spl-token\";\nimport {Connection, Keypair, LAMPORTS_PER_SOL, SystemProgram, Transaction, sendAndConfirmTransaction} from \"@solana/web3.js\";\n\n(async () => {\n\nconst connection = new Connection('http://127.0.0.1:8899', 'confirmed');\n\nconst wallet = Keypair.generate();\n\nconst airdropSignature = await connection.requestAirdrop(\n  wallet.publicKey,\n  2 * LAMPORTS_PER_SOL,\n);\n\nawait connection.confirmTransaction(airdropSignature);\n\nconst associatedTokenAccount = await getAssociatedTokenAddress(\n  NATIVE_MINT,\n  wallet.publicKey\n)\n\n// Create token account to hold your wrapped SOL\nconst ataTransaction = new Transaction()\n  .add(\n    createAssociatedTokenAccountInstruction(\n      wallet.publicKey,\n      associatedTokenAccount,\n      wallet.publicKey,\n      NATIVE_MINT\n    )\n  );\n\nawait sendAndConfirmTransaction(connection, ataTransaction, [wallet]);\n\n// Transfer SOL to associated token account and use SyncNative to update wrapped SOL balance\nconst solTransferTransaction = new Transaction()\n  .add(\n    SystemProgram.transfer({\n        fromPubkey: wallet.publicKey,\n        toPubkey: associatedTokenAccount,\n        lamports: LAMPORTS_PER_SOL\n      }),\n      createSyncNativeInstruction(\n        associatedTokenAccount\n    )\n  )\n\nawait sendAndConfirmTransaction(connection, solTransferTransaction, [wallet]);\n\nconst accountInfo = await getAccountInfo(connection, associatedTokenAccount);\n\nconsole.log(`Native: ${accountInfo.isNative}, Lamports: ${accountInfo.amount}`);\n\n})();\n")))),(0,l.kt)("p",null,"To unwrap the Token back to SOL:"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token unwrap GJTxcnA5Sydy8YRhqvHxbQ5QNsPyRKvzguodQEaShJje\nUnwrapping GJTxcnA5Sydy8YRhqvHxbQ5QNsPyRKvzguodQEaShJje\n  Amount: 1 SOL\n  Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\nSignature: f7opZ86ZHKGvkJBQsJ8Pk81v8F3v1VUfyd4kFs4CABmfTnSZK5BffETznUU3tEWvzibgKJASCf7TUpDmwGi8Rmh\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const walletBalance = await connection.getBalance(wallet.publicKey);\n\nconsole.log(`Balance before unwrapping 1 WSOL: ${walletBalance}`)\n\nawait closeAccount(connection, wallet, associatedTokenAccount, wallet.publicKey, wallet);\n\nconst walletBalancePostClose = await connection.getBalance(wallet.publicKey);\n\nconsole.log(`Balance after unwrapping 1 WSOL: ${walletBalancePostClose}`)\n\n/*\nBalance before unwrapping 1 WSOL: 997950720\nBalance after unwrapping 1 WSOL: 1999985000\n*.\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note"),": Some lamports were removed for transaction fees"))),(0,l.kt)("h3",{id:"example-transferring-tokens-to-another-user"},"Example: Transferring tokens to another user"),(0,l.kt)("p",null,"First the receiver uses ",(0,l.kt)("inlineCode",{parentName:"p"},"spl-token create-account")," to create their associated\ntoken account for the Token type.  Then the receiver obtains their wallet\naddress by running ",(0,l.kt)("inlineCode",{parentName:"p"},"solana address")," and provides it to the sender."),(0,l.kt)("p",null,"The sender then runs:"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token transfer AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\nTransfer 50 tokens\n  Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi\n  Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\n  Recipient associated token account: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks\n\nSignature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { clusterApiUrl, Connection, Keypair, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createMint, getOrCreateAssociatedTokenAccount, mintTo, transfer } from '@solana/spl-token';\n\n(async () => {\n    // Connect to cluster\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n    // Generate a new wallet keypair and airdrop SOL\n    const fromWallet = Keypair.generate();\n    const fromAirdropSignature = await connection.requestAirdrop(fromWallet.publicKey, LAMPORTS_PER_SOL);\n\n    // Wait for airdrop confirmation\n    await connection.confirmTransaction(fromAirdropSignature);\n\n    // Generate a new wallet to receive newly minted token\n    const toWallet = Keypair.generate();\n\n    // Create new token mint\n    const mint = await createMint(connection, fromWallet, fromWallet.publicKey, null, 9);\n\n    // Get the token account of the fromWallet address, and if it does not exist, create it\n    const fromTokenAccount = await getOrCreateAssociatedTokenAccount(\n        connection,\n        fromWallet,\n        mint,\n        fromWallet.publicKey\n    );\n\n    // Get the token account of the toWallet address, and if it does not exist, create it\n    const toTokenAccount = await getOrCreateAssociatedTokenAccount(connection, fromWallet, mint, toWallet.publicKey);\n\n    // Mint 1 new token to the \"fromTokenAccount\" account we just created\n    let signature = await mintTo(\n        connection,\n        fromWallet,\n        mint,\n        fromTokenAccount.address,\n        fromWallet.publicKey,\n        [],\n        1000000000\n    );\n    console.log('mint tx:', signature);\n\n    // Transfer the new token to the \"toTokenAccount\" we just created\n    signature = await transfer(\n        connection,\n        toWallet,\n        fromTokenAccount.address,\n        toTokenAccount.address,\n        fromWallet.publicKey,\n        [],\n        1000000000\n    );\n    console.log('transfer tx:', signature);\n})();\n")))),(0,l.kt)("h3",{id:"example-transferring-tokens-to-another-user-with-sender-funding"},"Example: Transferring tokens to another user, with sender-funding"),(0,l.kt)("p",null,"If the receiver does not yet have an associated token account, the sender may\nchoose to fund the receiver's account."),(0,l.kt)("p",null,"The receiver obtains their wallet address by running ",(0,l.kt)("inlineCode",{parentName:"p"},"solana address")," and provides it to the sender."),(0,l.kt)("p",null,"The sender then runs to fund the receiver's associated token account, at the\nsender's expense, and then transfers 50 tokens into it:"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token transfer --fund-recipient AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\nTransfer 50 tokens\n  Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi\n  Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\n  Recipient associated token account: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks\n  Funding recipient: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks (0.00203928 SOL)\n\nSignature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const signature = await transfer(\n    connection,\n    toWallet, // Just update payer to be the toWallet\n    fromTokenAccount.address,\n    toTokenAccount.address,\n    fromWallet.publicKey,\n    [],\n    1000000000\n);\nconsole.log('transfer tx:', signature);\n")))),(0,l.kt)("h3",{id:"example-transferring-tokens-to-an-explicit-recipient-token-account"},"Example: Transferring tokens to an explicit recipient token account"),(0,l.kt)("p",null,"Tokens may be transferred to a specific recipient token account.  The recipient\ntoken account must already exist and be of the same Token type."),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token create-account AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM /path/to/auxiliary_keypair.json\nCreating account CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ\nSignature: 4yPWj22mbyLu5mhfZ5WATNfYzTt5EQ7LGzryxM7Ufu7QCVjTE7czZdEBqdKR7vjKsfAqsBdjU58NJvXrTqCXvfWW\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token accounts AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM -v\nAccount                                       Token                                         Balance\n--------------------------------------------------------------------------------------------------------\n7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi  AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  100\nCqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ  AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  0    (Aux-1*)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token transfer 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi 50 CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ\nTransfer 50 tokens\n  Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi\n  Recipient: CqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ\n\nSignature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token accounts AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM -v\nAccount                                       Token                                         Balance\n--------------------------------------------------------------------------------------------------------\n7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi  AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  50\nCqAxDdBRnawzx9q4PYM3wrybLHBhDZ4P6BTV13WsRJYJ  AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM  50  (Aux-1*)\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import {getAccountInfo, createMint, createAccount, mintTo, getOrCreateAssociatedTokenAccount, transfer} from \"@solana/spl-token\";\nimport {clusterApiUrl, Connection, Keypair, LAMPORTS_PER_SOL} from \"@solana/web3.js\";\n\n(async () => {\n\n  const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n\n  const wallet = Keypair.generate();\n  const auxiliaryKeypair = Keypair.generate();\n\n  const airdropSignature = await connection.requestAirdrop(\n    wallet.publicKey,\n    LAMPORTS_PER_SOL,\n  );\n\n  await connection.confirmTransaction(airdropSignature);\n\n  const mint = await createMint(\n    connection,\n    wallet,\n    wallet.publicKey,\n    wallet.publicKey,\n    9\n  );\n\n  // Create custom token account\n  const auxiliaryTokenAccount = await createAccount(\n    connection,\n    wallet,\n    mint,\n    wallet.publicKey,\n    auxiliaryKeypair\n  );\n\n  const associatedTokenAccount = await getOrCreateAssociatedTokenAccount(\n    connection,\n    wallet,\n    mint,\n    wallet.publicKey\n  );\n\n  await mintTo(\n    connection,\n    wallet,\n    mint,\n    associatedTokenAccount.address,\n    wallet,\n    1\n  );\n\n  const accountInfo = await getAccountInfo(connection, associatedTokenAccount.address);\n\n  console.log(accountInfo.amount);\n  // 1\n\n  await transfer(\n    connection,\n    wallet,\n    associatedTokenAccount.address,\n    auxiliaryTokenAccount,\n    wallet,\n    1\n  );\n\n  const auxAccountInfo = await getAccountInfo(connection, auxiliaryTokenAccount);\n\n  console.log(auxAccountInfo.amount);\n  // 1\n})();\n")))),(0,l.kt)("h3",{id:"example-create-a-non-fungible-token"},"Example: Create a non-fungible token"),(0,l.kt)("p",null,"Create the token type with zero decimal place,"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token create-token --decimals 0\nCreating token 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\nSignature: 4kz82JUey1B9ki1McPW7NYv1NqPKCod6WNptSkYqtuiEsQb9exHaktSAHJJsm4YxuGNW4NugPJMFX9ee6WA2dXts\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const mint = await createMint(\n  connection,\n  wallet,\n  wallet.publicKey,\n  wallet.publicKey,\n  0\n);\n")))),(0,l.kt)("p",null,"then create an account to hold tokens of this new type:"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token create-account 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\nCreating account 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM\nSignature: sjChze6ecaRtvuQVZuwURyg6teYeiH8ZwT6UTuFNKjrdayQQ3KNdPB7d2DtUZ6McafBfEefejHkJ6MWQEfVHLtC\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const associatedTokenAccount = await getOrCreateAssociatedTokenAccount(\n    connection,\n    wallet,\n    mint,\n    wallet.publicKey\n  );\n")))),(0,l.kt)("p",null,"Now mint only one token into the account,"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token mint 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z 1 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM\nMinting 1 tokens\n  Token: 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\n  Recipient: 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM\nSignature: 2Kzg6ZArQRCRvcoKSiievYy3sfPqGV91Whnz6SeimhJQXKBTYQf3E54tWg3zPpYLbcDexxyTxnj4QF69ucswfdY\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"await mintTo(\n    connection,\n    wallet,\n    mint,\n    associatedTokenAccount.address,\n    wallet,\n    1\n  );\n")))),(0,l.kt)("p",null,"and disable future minting:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token authorize 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z mint --disable\nUpdating 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\n  Current mint authority: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\n  New mint authority: disabled\nSignature: 5QpykLzZsceoKcVRRFow9QCdae4Dp2zQAcjebyEWoezPFg2Np73gHKWQicHG1mqRdXu3yiZbrft3Q8JmqNRNqhwU\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note"),": Not currently available in the js/ts library"),(0,l.kt)("p",null,"Now the ",(0,l.kt)("inlineCode",{parentName:"p"},"7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM")," account holds the\none and only ",(0,l.kt)("inlineCode",{parentName:"p"},"559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z")," token:"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token account-info 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\n\nAddress: 7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM\nBalance: 1\nMint: 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\nOwner: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg\nState: Initialized\nDelegation: (not set)\nClose authority: (not set)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token supply 559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z\n1\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'const accountInfo = await getAccountInfo(connection, associatedTokenAccount.address);\n\nconsole.log(accountInfo.amount);\n// 1\nconst mintInfo = await getMintInfo(\n    connection,\n    mint\n  );\n\nconsole.log(mintInfo);\n/*\n{\n  address: "7KqpRwzkkeweW5jQoETyLzhvs9rcCj9dVQ1MnzudirsM",\n  mintAuthority: "559u4Tdr9umKwft3yHMsnAxohhzkFnUBPAFtibwuZD9z",\n  supply: 1,\n  decimals: 0,\n  isInitialized: true,\n  freezeAuthority: "vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg"\n}\n */\n')))),(0,l.kt)("h3",{id:"multisig-usage"},"Multisig usage"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("p",null,"The main difference in ",(0,l.kt)("inlineCode",{parentName:"p"},"spl-token")," command line usage when referencing multisig\naccounts is in specifying the ",(0,l.kt)("inlineCode",{parentName:"p"},"--owner")," argument. Typically the signer specified\nby this argument directly provides a signature granting its authority, but in\nthe multisig case it just points to the address of the multisig account.\nSignatures are then provided by the multisig signer-set members specified by the\n",(0,l.kt)("inlineCode",{parentName:"p"},"--multisig-signer")," argument."),(0,l.kt)("p",null,"Multisig accounts can be used for any authority on an SPL Token mint or token\naccount."),(0,l.kt)("ul",null,(0,l.kt)("li",null,"Mint account mint authority:",(0,l.kt)("code",null,"spl-token mint ..."),",",(0,l.kt)("code",null,"spl-token authorize ... mint ...")),(0,l.kt)("li",null,"Mint account freeze authority:",(0,l.kt)("code",null,"spl-token freeze ..."),",",(0,l.kt)("code",null,"spl-token thaw ..."),",",(0,l.kt)("code",null,"spl-token authorize ... freeze ...")),(0,l.kt)("li",null,"Token account owner authority:",(0,l.kt)("code",null,"spl-token transfer ..."),",",(0,l.kt)("code",null,"spl-token approve ..."),",",(0,l.kt)("code",null,"spl-token revoke ..."),",",(0,l.kt)("code",null,"spl-token burn ..."),",",(0,l.kt)("code",null,"spl-token wrap ..."),",",(0,l.kt)("code",null,"spl-token unwrap ..."),",",(0,l.kt)("code",null,"spl-token authorize ... owner ...")),(0,l.kt)("li",null,"Token account close authority:",(0,l.kt)("code",null,"spl-token close ..."),",",(0,l.kt)("code",null,"spl-token authorize ... close ...")))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("p",null,"The main difference in using multisign is specifying the owner as the multisig key,\nand giving the list of signers when contructing a transaction. Normally you would\nprovide the signer that has authority to run the transaction as the owner, but in\nthe multisig case the owner would be the multisig key."),(0,l.kt)("p",null,"Multisig accounts can be used for any authority on an SPL Token mint or token account."),(0,l.kt)("ul",null,(0,l.kt)("li",null,"Mint account mint authority:",(0,l.kt)("code",null,"createMint(/* ... */, mintAuthority: multisigKey, /* ... */)")),(0,l.kt)("li",null,"Mint account freeze authority:",(0,l.kt)("code",null,"createMint(/* ... */, freezeAuthority: multisigKey, /* ... */)")),(0,l.kt)("li",null,"Token account owner authority:",(0,l.kt)("code",null,"getOrCreateAssociatedTokenAccount(/* ... */, mintAuthority: multisigKey, /* ... */)")),(0,l.kt)("li",null,"Token account close authority:",(0,l.kt)("code",null,"closeAccount(/* ... */, authority: multisigKey, /* ... */)"))))),(0,l.kt)("h3",{id:"example-mint-with-multisig-authority"},"Example: Mint with multisig authority"),(0,l.kt)("p",null,"First create keypairs to act as the multisig signer-set. In reality, these can\nbe any supported signer, like: a Ledger hardware wallet, a keypair file, or\na paper wallet. For convenience, generated keypairs will be used in this example."),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'$ for i in $(seq 3); do solana-keygen new --no-passphrase -so "signer-${i}.json"; done\nWrote new keypair to signer-1.json\nWrote new keypair to signer-2.json\nWrote new keypair to signer-3.json\n'))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const signer1 = Keypair.generate();\nconst signer2 = Keypair.generate();\nconst signer3 = Keypair.generate();\n")))),(0,l.kt)("p",null,"In order to create the multisig account, the public keys of the signer-set must\nbe collected."),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},'$ for i in $(seq 3); do SIGNER="signer-${i}.json"; echo "$SIGNER: $(solana-keygen pubkey "$SIGNER")"; done\nsigner-1.json: BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ\nsigner-2.json: DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY\nsigner-3.json: D7ssXHrZJjfpZXsmDf8RwfPxe1BMMMmP1CtmX3WojPmG\n'))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"console.log(signer1.publicKey.toBase58());\nconsole.log(signer2.publicKey.toBase58());\nconsole.log(signer3.publicKey.toBase58());\n/*\n  BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ\n  DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY\n  D7ssXHrZJjfpZXsmDf8RwfPxe1BMMMmP1CtmX3WojPmG\n */\n")))),(0,l.kt)("p",null,"Now the multisig account can be created with the ",(0,l.kt)("inlineCode",{parentName:"p"},"spl-token create-multisig"),"\nsubcommand. Its first positional argument is the minimum number of signers (",(0,l.kt)("inlineCode",{parentName:"p"},"M"),")\nthat must sign a transaction affecting a token/mint account that is controlled\nby this multisig account. The remaining positional arguments are the public keys\nof all keypairs allowed (",(0,l.kt)("inlineCode",{parentName:"p"},"N"),') to sign for the multisig account. This example\nwill use a "2 of 3" multisig account.  That is, two of the three allowed keypairs\nmust sign all transactions.'),(0,l.kt)("p",null,"NOTE: SPL Token Multisig accounts are limited to a signer-set of eleven signers\n(1 <= ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," <= 11) and minimum signers must be no more than ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," (1 <= ",(0,l.kt)("inlineCode",{parentName:"p"},"M")," <= ",(0,l.kt)("inlineCode",{parentName:"p"},"N"),")"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$ spl-token create-multisig 2 BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\\nDhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY D7ssXHrZJjfpZXsmDf8RwfPxe1BMMMmP1CtmX3WojPmG\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"Creating 2/3 multisig 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re\nSignature: 2FN4KXnczAz33SAxwsuevqrD1BvikP6LUhLie5Lz4ETt594X8R7yvMZzZW2zjmFLPsLQNHsRuhQeumExHbnUGC9A\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const multisigKey = await createMultisig(\n  connection,\n  payer,\n  [\n    signer1.publicKey,\n    signer2.publicKey,\n    signer3.publicKey\n  ],\n  2\n);\n\nconsole.log(`Created 2/3 multisig ${multisigKey.toBase58()}`);\n// Created 2/3 multisig 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re\n")))),(0,l.kt)("p",null,"Next create the token mint and receiving accounts\n",(0,l.kt)("a",{parentName:"p",href:"#example-creating-your-own-fungible-token"},"as previously described"),"\nand set the mint account's minting authority to the multisig account"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ spl-token create-token\nCreating token 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\nSignature: 3n6zmw3hS5Hyo5duuhnNvwjAbjzC42uzCA3TTsrgr9htUonzDUXdK1d8b8J77XoeSherqWQM8mD8E1TMYCpksS2r\n\n$ spl-token create-account 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\nCreating account EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\nSignature: 5mVes7wjE7avuFqzrmSCWneKBQyPAjasCLYZPNSkmqmk2YFosYWAP9hYSiZ7b7NKpV866x5gwyKbbppX3d8PcE9s\n\n$ spl-token authorize 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o mint 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re\nUpdating 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Current mint authority: 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE\n  New mint authority: 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re\nSignature: yy7dJiTx1t7jvLPCRX5RQWxNRNtFwvARSfbMJG94QKEiNS4uZcp3GhhjnMgZ1CaWMWe4jVEMy9zQBoUhzomMaxC\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const mint = await createMint(\n    connection,\n    payer,\n    multisigKey,\n    multisigKey,\n    9\n  );\n\nconst associatedTokenAccount = await getOrCreateAssociatedTokenAccount(\n  connection,\n  payer,\n  mint,\n  signer1.publicKey\n);\n")))),(0,l.kt)("p",null,"To demonstrate that the mint account is now under control of the multisig\naccount, attempting to mint with one multisig signer fails"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\\n--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\\n--multisig-signer signer-1.json\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"Minting 1 tokens\n  Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\nRPC response error -32002: Transaction simulation failed: Error processing Instruction 0: missing required signature for instruction\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"try {\n  await mintTo(\n    connection,\n    payer,\n    mint,\n    associatedTokenAccount.address,\n    multisigKey,\n    [],\n    1\n  )\n} catch (e) {\n  console.log(e);\n}\n// Error: Signature verification failed\n")))),(0,l.kt)("p",null,"But repeating with a second multisig signer, succeeds"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\\n--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\\n--multisig-signer signer-1.json \\\n--multisig-signer signer-2.json\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"Minting 1 tokens\n  Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\nSignature: 2ubqWqZb3ooDuc8FLaBkqZwzguhtMgQpgMAHhKsWcUzjy61qtJ7cZ1bfmYktKUfnbMYWTC1S8zdKgU6m4THsgspT\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"await mintTo(\n  connection,\n  payer,\n  mint,\n  associatedTokenAccount.address,\n  multisigKey,\n  [\n    signer1,\n    signer2\n  ],\n  1\n)\n\nconst mintInfo = await getMintInfo(\n  connection,\n  mint\n)\n\nconsole.log(`Minted ${mintInfo.supply} token`);\n// Minted 1 token\n")))),(0,l.kt)("h3",{id:"example-offline-signing-with-multisig"},"Example: Offline signing with multisig"),(0,l.kt)("p",null,"Sometimes online signing is not possible or desireable. Such is the case for example when signers are not in the same geographic location\nor when they use air-gapped devices not connected to the network.  In this case, we use offline signing which combines the\nprevious examples of ",(0,l.kt)("a",{parentName:"p",href:"#example-mint-with-multisig-authority"},"multisig")," with ",(0,l.kt)("a",{parentName:"p",href:"https://docs.solana.com/offline-signing"},"offline signing"),"\nand a ",(0,l.kt)("a",{parentName:"p",href:"https://docs.solana.com/offline-signing/durable-nonce"},"nonce account"),"."),(0,l.kt)("p",null,"This example will use the same mint account, token account, multisig account,\nand multisig signer-set keypair filenames as the online example, as well as a nonce\naccount that we create here:"),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ solana-keygen new -o nonce-keypair.json\n...\n======================================================================\npubkey: Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj\n======================================================================\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ solana create-nonce-account nonce-keypair.json 1\nSignature: 3DALwrAAmCDxqeb4qXZ44WjpFcwVtgmJKhV4MW5qLJVtWeZ288j6Pzz1F4BmyPpnGLfx2P8MEJXmqPchX5y2Lf3r\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ solana nonce-account Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj\nBalance: 0.01 SOL\nMinimum Balance Required: 0.00144768 SOL\nNonce blockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E\nFee: 5000 lamports per signature\nAuthority: 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const connection = new Connection(\n  clusterApiUrl('devnet'),\n  'confirmed',\n);\n\nconst onlineAccount = Keypair.generate();\nconst nonceAccount = Keypair.generate();\n\nconst minimumAmount = await connection.getMinimumBalanceForRentExemption(\n  NONCE_ACCOUNT_LENGTH,\n);\n\n// Form CreateNonceAccount transaction\nconst transaction = new Transaction()\n  .add(\n  SystemProgram.createNonceAccount({\n    fromPubkey: onlineAccount.publicKey,\n    noncePubkey: nonceAccount.publicKey,\n    authorizedPubkey: onlineAccount.publicKey,\n    lamports: minimumAmount,\n  }),\n);\n\nawait web3.sendAndConfirmTransaction(connection, transaction, [onlineAccount, nonceAccount])\n\nconst nonceAccountData = await connection.getNonce(\n  nonceAccount.publicKey,\n  'confirmed',\n);\n\nconsole.log(nonceAccountData);\n/*\nNonceAccount {\n  authorizedPubkey: '5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE'\n  nonce: '6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E',\n  feeCalculator: { lamportsPerSignature: 5000 }\n}\n */\n")))),(0,l.kt)("p",null,"For the fee-payer and nonce-authority roles, a local hot wallet at\n",(0,l.kt)("inlineCode",{parentName:"p"},"5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE")," will be used."),(0,l.kt)(k,{className:"unique-tabs",groupId:"language-selection",mdxType:"Tabs"},(0,l.kt)(g,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,l.kt)("p",null,'First a template command is built by specifying all signers by their public\nkey. Upon running this command, all signers will be listed as "Absent Signers"\nin the output. This command will be run by each offline signer to generate the\ncorresponding signature.'),(0,l.kt)("p",null,"NOTE: The argument to the ",(0,l.kt)("inlineCode",{parentName:"p"},"--blockhash"),' parameter is the "Nonce blockhash:" field from\nthe designated durable nonce account.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\\n--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\\n--multisig-signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\\n--multisig-signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY \\\n--blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\\n--fee-payer 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\\n--nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\\n--nonce-authority 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\\n--sign-only \\\n--mint-decimals 9\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"Minting 1 tokens\n  Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\n\nBlockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E\nAbsent Signers (Pubkey):\n 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE\n BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ\n DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY\n")),(0,l.kt)("p",null,"Next each offline signer executes the template command, replacing each instance\nof their public key with the corresponding keypair."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\\n--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\\n--multisig-signer signer-1.json \\\n--multisig-signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY \\\n--blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\\n--fee-payer 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\\n--nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\\n--nonce-authority 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\\n--sign-only \\\n--mint-decimals 9\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"Minting 1 tokens\n  Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\n\nBlockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E\nSigners (Pubkey=Signature):\n BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ=2QVah9XtvPAuhDB2QwE7gNaY962DhrGP6uy9zeN4sTWvY2xDUUzce6zkQeuT3xg44wsgtUw2H5Rf8pEArPSzJvHX\nAbsent Signers (Pubkey):\n 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE\n DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\\n--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\\n--multisig-signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\\n--multisig-signer signer-2.json \\\n--blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\\n--fee-payer 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\\n--nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\\n--nonce-authority 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE \\\n--sign-only \\\n--mint-decimals 9\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"Minting 1 tokens\n  Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\n\nBlockhash: 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E\nSigners (Pubkey=Signature):\n DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY=2brZbTiCfyVYSCp6vZE3p7qCDeFf3z1JFmJHPBrz8SnWSDZPjbpjsW2kxFHkktTNkhES3y6UULqS4eaWztLW7FrU\nAbsent Signers (Pubkey):\n 5hbZyJ3KRuFvdy5QBxvE9KwK17hzkAUkQHZTxPbiWffE\n BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ\n")),(0,l.kt)("p",null,"Finally, the offline signers communicate the ",(0,l.kt)("inlineCode",{parentName:"p"},"Pubkey=Signature")," pair from the\noutput of their command to the party who will broadcast the transaction to the\ncluster. The broadcasting party then runs the template command after modifying\nit as follows:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Replaces any corresponding public keys with their keypair (",(0,l.kt)("inlineCode",{parentName:"li"},"--fee-payer ..."),"\nand ",(0,l.kt)("inlineCode",{parentName:"li"},"--nonce-authority ...")," in this example)"),(0,l.kt)("li",{parentName:"ol"},"Removes the ",(0,l.kt)("inlineCode",{parentName:"li"},"--sign-only")," argument, and in the case of the ",(0,l.kt)("inlineCode",{parentName:"li"},"mint")," subcommand,\nthe ",(0,l.kt)("inlineCode",{parentName:"li"},"--mint-decimals ...")," argument as it will be queried from the cluster"),(0,l.kt)("li",{parentName:"ol"},"Adds the offline signatures to the template command via the ",(0,l.kt)("inlineCode",{parentName:"li"},"--signer")," argument")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$ spl-token mint 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o 1 EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC \\\n--owner 46ed77fd4WTN144q62BwjU2B3ogX3Xmmc8PT5Z3Xc2re \\\n--multisig-signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ \\\n--multisig-signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY \\\n--blockhash 6DPt2TfFBG7sR4Hqu16fbMXPj8ddHKkbU4Y3EEEWrC2E \\\n--fee-payer hot-wallet.json \\\n--nonce Fjyud2VXixk2vCs4DkBpfpsq48d81rbEzh6deKt7WvPj \\\n--nonce-authority hot-wallet.json \\\n--signer BzWpkuRrwXHq4SSSFHa8FJf6DRQy4TaeoXnkA89vTgHZ=2QVah9XtvPAuhDB2QwE7gNaY962DhrGP6uy9zeN4sTWvY2xDUUzce6zkQeuT3xg44wsgtUw2H5Rf8pEArPSzJvHX \\\n--signer DhkUfKgfZ8CF6PAGKwdABRL1VqkeNrTSRx8LZfpPFVNY=2brZbTiCfyVYSCp6vZE3p7qCDeFf3z1JFmJHPBrz8SnWSDZPjbpjsW2kxFHkktTNkhES3y6UULqS4eaWztLW7FrU\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"Minting 1 tokens\n  Token: 4VNVRJetwapjwYU8jf4qPgaCeD76wyz8DuNj8yMCQ62o\n  Recipient: EX8zyi2ZQUuoYtXd4MKmyHYLTjqFdWeuoTHcsTdJcKHC\nSignature: 2AhZXVPDBVBxTQLJohyH1wAhkkSuxRiYKomSSXtwhPL9AdF3wmhrrJGD7WgvZjBPLZUFqWrockzPp9S3fvzbgicy\n"))),(0,l.kt)(g,{value:"jsx",label:"JS",mdxType:"TabItem"},(0,l.kt)("p",null,"First a raw transaction is built using the nonceAccountInformation and tokenAccount key.\nAll signers of the transaction are noted as part of the raw transaction. This transaction\nwill be handed to the signers later for signing."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const nonceAccountInfo = await connection.getAccountInfo(\n  nonceAccount.publicKey,\n  'confirmed'\n);\n\nconst nonceAccountFromInfo = web3.NonceAccount.fromAccountData(nonceAccountInfo.data);\n\nconsole.log(nonceAccountFromInfo);\n\nconst nonceInstruction = web3.SystemProgram.nonceAdvance({\n  authorizedPubkey: onlineAccount.publicKey,\n  noncePubkey: nonceAccount.publicKey\n});\n\nconst nonce = nonceAccountFromInfo.nonce;\n\nconst mintToTransaction = new web3.Transaction({\n  feePayer: onlineAccount.publicKey,\n  nonceInfo: {nonce, nonceInstruction}\n})\n  .add(\n    createMintToInstruction(\n      mint,\n      associatedTokenAccount.address,\n      multisigkey,\n      [\n        signer1,\n        onlineAccount\n      ],\n      1,\n      TOKEN_PROGRAM_ID\n    )\n  );\n")),(0,l.kt)("p",null,"Next each offline signer will take the transaction buffer and sign it with their corresponding key."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let mintToTransactionBuffer = mintToTransaction.serializeMessage();\n\nlet onlineSIgnature = nacl.sign.detached(mintToTransactionBuffer, onlineAccount.secretKey);\nmintToTransaction.addSignature(onlineAccount.publicKey, onlineSIgnature);\n\n// Handed to offline signer for signature\nlet offlineSignature = nacl.sign.detached(mintToTransactionBuffer, signer1.secretKey);\nmintToTransaction.addSignature(signer1.publicKey, offlineSignature);\n\nlet rawMintToTransaction = mintToTransaction.serialize();\n")),(0,l.kt)("p",null,"Finally, the hot wallet will take the transaction, serialize it, and broadcast it to the network."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jax"},"// Send to online signer for broadcast to network\nawait web3.sendAndConfirmRawTransaction(connection, rawMintToTransaction);\n")))),(0,l.kt)("h2",{id:"json-rpc-methods"},"JSON RPC methods"),(0,l.kt)("p",null,"There is a rich set of JSON RPC methods available for use with SPL Token:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"getTokenAccountBalance")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"getTokenAccountsByDelegate")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"getTokenAccountsByOwner")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"getTokenLargestAccounts")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"getTokenSupply"))),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"https://docs.solana.com/apps/jsonrpc-api"},"https://docs.solana.com/apps/jsonrpc-api")," for more details."),(0,l.kt)("p",null,"Additionally the versatile ",(0,l.kt)("inlineCode",{parentName:"p"},"getProgramAccounts")," JSON RPC method can be employed in various ways to fetch SPL Token accounts of interest."),(0,l.kt)("h3",{id:"finding-all-token-accounts-for-a-specific-mint"},"Finding all token accounts for a specific mint"),(0,l.kt)("p",null,"To find all token accounts for the ",(0,l.kt)("inlineCode",{parentName:"p"},"TESTpKgj42ya3st2SQTKiANjTBmncQSCqLAZGcSPLGM")," mint:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'curl http://api.mainnet-beta.solana.com -X POST -H "Content-Type: application/json" -d \'\n  {\n    "jsonrpc": "2.0",\n    "id": 1,\n    "method": "getProgramAccounts",\n    "params": [\n      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",\n      {\n        "encoding": "jsonParsed",\n        "filters": [\n          {\n            "dataSize": 165\n          },\n          {\n            "memcmp": {\n              "offset": 0,\n              "bytes": "TESTpKgj42ya3st2SQTKiANjTBmncQSCqLAZGcSPLGM"\n            }\n          }\n        ]\n      }\n    ]\n  }\n\'\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},'"dataSize": 165')," filter selects all ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/solana-labs/solana-program-library/blob/08d9999f997a8bf38719679be9d572f119d0d960/token/program/src/state.rs#L86-L106"},"Token\nAccount"),"s,\nand then the ",(0,l.kt)("inlineCode",{parentName:"p"},'"memcmp": ...')," filter selects based on the\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/solana-labs/solana-program-library/blob/08d9999f997a8bf38719679be9d572f119d0d960/token/program/src/state.rs#L88"},"mint"),"\naddress within each token account."),(0,l.kt)("h3",{id:"finding-all-token-accounts-for-a-wallet"},"Finding all token accounts for a wallet"),(0,l.kt)("p",null,"Find all token accounts owned by the ",(0,l.kt)("inlineCode",{parentName:"p"},"vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg")," user:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'curl http://api.mainnet-beta.solana.com -X POST -H "Content-Type: application/json" -d \'\n  {\n    "jsonrpc": "2.0",\n    "id": 1,\n    "method": "getProgramAccounts",\n    "params": [\n      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",\n      {\n        "encoding": "jsonParsed",\n        "filters": [\n          {\n            "dataSize": 165\n          },\n          {\n            "memcmp": {\n              "offset": 32,\n              "bytes": "vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg"\n            }\n          }\n        ]\n      }\n    ]\n  }\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},'"dataSize": 165')," filter selects all ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/solana-labs/solana-program-library/blob/08d9999f997a8bf38719679be9d572f119d0d960/token/program/src/state.rs#L86-L106"},"Token\nAccount"),"s,\nand then the ",(0,l.kt)("inlineCode",{parentName:"p"},'"memcmp": ...')," filter selects based on the\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/solana-labs/solana-program-library/blob/08d9999f997a8bf38719679be9d572f119d0d960/token/program/src/state.rs#L90"},"owner"),"\naddress within each token account."),(0,l.kt)("h2",{id:"operational-overview"},"Operational overview"),(0,l.kt)("h3",{id:"creating-a-new-token-type"},"Creating a new token type"),(0,l.kt)("p",null,"A new token type can be created by initializing a new Mint with the\n",(0,l.kt)("inlineCode",{parentName:"p"},"InitializeMint"),' instruction. The Mint is used to create or "mint" new tokens,\nand these tokens are stored in Accounts. A Mint is associated with each\nAccount, which means that the total supply of a particular token type is equal\nto the balances of all the associated Accounts.'),(0,l.kt)("p",null,"It's important to note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"InitializeMint")," instruction does not require\nthe Solana account being initialized also be a signer. The ",(0,l.kt)("inlineCode",{parentName:"p"},"InitializeMint"),"\ninstruction should be atomically processed with the system instruction that\ncreates the Solana account by including both instructions in the same\ntransaction."),(0,l.kt)("p",null,"Once a Mint is initialized, the ",(0,l.kt)("inlineCode",{parentName:"p"},"mint_authority")," can create new tokens using the\n",(0,l.kt)("inlineCode",{parentName:"p"},"MintTo")," instruction.  As long as a Mint contains a valid ",(0,l.kt)("inlineCode",{parentName:"p"},"mint_authority"),", the\nMint is considered to have a non-fixed supply, and the ",(0,l.kt)("inlineCode",{parentName:"p"},"mint_authority")," can\ncreate new tokens with the ",(0,l.kt)("inlineCode",{parentName:"p"},"MintTo")," instruction at any time.  The ",(0,l.kt)("inlineCode",{parentName:"p"},"SetAuthority"),"\ninstruction can be used to irreversibly set the Mint's authority to ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),",\nrendering the Mint's supply fixed.  No further tokens can ever be Minted."),(0,l.kt)("p",null,"Token supply can be reduced at any time by issuing a ",(0,l.kt)("inlineCode",{parentName:"p"},"Burn")," instruction which\nremoves and discards tokens from an Account."),(0,l.kt)("h3",{id:"creating-accounts"},"Creating accounts"),(0,l.kt)("p",null,"Accounts hold token balances and are created using the ",(0,l.kt)("inlineCode",{parentName:"p"},"InitializeAccount"),"\ninstruction. Each Account has an owner who must be present as a signer in some\ninstructions."),(0,l.kt)("p",null,"An Account's owner may transfer ownership of an account to another using the\n",(0,l.kt)("inlineCode",{parentName:"p"},"SetAuthority")," instruction."),(0,l.kt)("p",null,"It's important to note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"InitializeAccount")," instruction does not require\nthe Solana account being initialized also be a signer. The ",(0,l.kt)("inlineCode",{parentName:"p"},"InitializeAccount"),"\ninstruction should be atomically processed with the system instruction that\ncreates the Solana account by including both instructions in the same\ntransaction."),(0,l.kt)("h3",{id:"transferring-tokens"},"Transferring tokens"),(0,l.kt)("p",null,"Balances can be transferred between Accounts using the ",(0,l.kt)("inlineCode",{parentName:"p"},"Transfer")," instruction.\nThe owner of the source Account must be present as a signer in the ",(0,l.kt)("inlineCode",{parentName:"p"},"Transfer"),"\ninstruction when the source and destination accounts are different."),(0,l.kt)("p",null,"It's important to note that when the source and destination of a ",(0,l.kt)("inlineCode",{parentName:"p"},"Transfer")," are\nthe ",(0,l.kt)("strong",{parentName:"p"},"same"),", the ",(0,l.kt)("inlineCode",{parentName:"p"},"Transfer")," will ",(0,l.kt)("em",{parentName:"p"},"always")," succeed. Therefore, a successful ",(0,l.kt)("inlineCode",{parentName:"p"},"Transfer"),"\ndoes not necessarily imply that the involved Accounts were valid SPL Token\naccounts, that any tokens were moved, or that the source Account was present as\na signer. We strongly recommend that developers are careful about checking that\nthe source and destination are ",(0,l.kt)("strong",{parentName:"p"},"different")," before invoking a ",(0,l.kt)("inlineCode",{parentName:"p"},"Transfer"),"\ninstruction from within their program."),(0,l.kt)("h3",{id:"burning"},"Burning"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Burn")," instruction decreases an Account's token balance without transferring\nto another Account, effectively removing the token from circulation permanently."),(0,l.kt)("p",null,"There is no other way to reduce supply on chain. This is similar to transferring\nto an account with unknown private key or destroying a private key. But the act\nof burning by using ",(0,l.kt)("inlineCode",{parentName:"p"},"Burn")," instructions is more explicit and can be confirmed on\nchain by any parties."),(0,l.kt)("h3",{id:"authority-delegation"},"Authority delegation"),(0,l.kt)("p",null,"Account owners may delegate authority over some or all of their token balance\nusing the ",(0,l.kt)("inlineCode",{parentName:"p"},"Approve")," instruction. Delegated authorities may transfer or burn up\nto the amount they've been delegated. Authority delegation may be revoked by the\nAccount's owner via the ",(0,l.kt)("inlineCode",{parentName:"p"},"Revoke")," instruction."),(0,l.kt)("h3",{id:"multisignatures"},"Multisignatures"),(0,l.kt)("p",null,"M of N multisignatures are supported and can be used in place of Mint\nauthorities or Account owners or delegates. Multisignature authorities must be\ninitialized with the ",(0,l.kt)("inlineCode",{parentName:"p"},"InitializeMultisig")," instruction. Initialization specifies\nthe set of N public keys that are valid and the number M of those N that must be\npresent as instruction signers for the authority to be legitimate."),(0,l.kt)("p",null,"It's important to note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"InitializeMultisig")," instruction does not\nrequire the Solana account being initialized also be a signer. The\n",(0,l.kt)("inlineCode",{parentName:"p"},"InitializeMultisig")," instruction should be atomically processed with the system\ninstruction that creates the Solana account by including both instructions in\nthe same transaction."),(0,l.kt)("h3",{id:"freezing-accounts"},"Freezing accounts"),(0,l.kt)("p",null,"The Mint may also contain a ",(0,l.kt)("inlineCode",{parentName:"p"},"freeze_authority")," which can be used to issue\n",(0,l.kt)("inlineCode",{parentName:"p"},"FreezeAccount")," instructions that will render an Account unusable.  Token\ninstructions that include a frozen account will fail until the Account is thawed\nusing the ",(0,l.kt)("inlineCode",{parentName:"p"},"ThawAccount")," instruction.  The ",(0,l.kt)("inlineCode",{parentName:"p"},"SetAuthority")," instruction can be used\nto change a Mint's ",(0,l.kt)("inlineCode",{parentName:"p"},"freeze_authority"),".  If a Mint's ",(0,l.kt)("inlineCode",{parentName:"p"},"freeze_authority")," is set to\n",(0,l.kt)("inlineCode",{parentName:"p"},"None")," then account freezing and thawing is permanently disabled and all\ncurrently frozen accounts will also stay frozen permanently."),(0,l.kt)("h3",{id:"wrapping-sol"},"Wrapping SOL"),(0,l.kt)("p",null,"The Token Program can be used to wrap native SOL. Doing so allows native SOL to\nbe treated like any other Token program token type and can be useful when being\ncalled from other programs that interact with the Token Program's interface."),(0,l.kt)("p",null,'Accounts containing wrapped SOL are associated with a specific Mint called the\n"Native Mint" using the public key\n',(0,l.kt)("inlineCode",{parentName:"p"},"So11111111111111111111111111111111111111112"),"."),(0,l.kt)("p",null,"These accounts have a few unique behaviors"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"InitializeAccount")," sets the balance of the initialized Account to the SOL\nbalance of the Solana account being initialized, resulting in a token balance\nequal to the SOL balance."),(0,l.kt)("li",{parentName:"ul"},"Transfers to and from not only modify the token balance but also transfer an\nequal amount of SOL from the source account to the destination account."),(0,l.kt)("li",{parentName:"ul"},"Burning is not supported"),(0,l.kt)("li",{parentName:"ul"},"When closing an Account the balance may be non-zero.")),(0,l.kt)("p",null,"The Native Mint supply will always report 0, regardless of how much SOL is currently wrapped."),(0,l.kt)("h3",{id:"rent-exemption"},"Rent-exemption"),(0,l.kt)("p",null,"To ensure a reliable calculation of supply, a consistency valid Mint, and\nconsistently valid Multisig accounts all Solana accounts holding an Account,\nMint, or Multisig must contain enough SOL to be considered ",(0,l.kt)("a",{parentName:"p",href:"https://docs.solana.com/implemented-proposals/rent"},"rent\nexempt")),(0,l.kt)("h3",{id:"closing-accounts"},"Closing accounts"),(0,l.kt)("p",null,"An account may be closed using the ",(0,l.kt)("inlineCode",{parentName:"p"},"CloseAccount")," instruction. When closing an\nAccount, all remaining SOL will be transferred to another Solana account\n(doesn't have to be associated with the Token Program). Non-native Accounts must\nhave a balance of zero to be closed."),(0,l.kt)("h3",{id:"non-fungible-tokens"},"Non-Fungible tokens"),(0,l.kt)("p",null,"An NFT is simply a token type where only a single token has been minted."),(0,l.kt)("h2",{id:"wallet-integration-guide"},"Wallet Integration Guide"),(0,l.kt)("p",null,"This section describes how to integrate SPL Token support into an existing\nwallet supporting native SOL.  It assumes a model whereby the user has a single\nsystem account as their ",(0,l.kt)("strong",{parentName:"p"},"main wallet address")," that they send and receive SOL\nfrom."),(0,l.kt)("p",null,"Although all SPL Token accounts do have their own address on-chain, there's no\nneed to surface these additional addresses to the user."),(0,l.kt)("p",null,"There are two programs that are used by the wallet:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"SPL Token program: generic program that is used by all SPL Tokens"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/solana-program-library/spl/associated-token-account"},"SPL Associated Token Account")," program: defines\nthe convention and provides the mechanism for mapping the user's wallet\naddress to the associated token accounts they hold.")),(0,l.kt)("h3",{id:"how-to-fetch-and-display-token-holdings"},"How to fetch and display token holdings"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://docs.solana.com/apps/jsonrpc-api#gettokenaccountsbyowner"},"getTokenAccountsByOwner"),"\nJSON RPC method can be used to fetch all token accounts for a wallet address."),(0,l.kt)("p",null,"For each token mint, the wallet could have multiple token accounts: the\nassociated token account and/or other ancillary token accounts"),(0,l.kt)("p",null,"By convention it is suggested that wallets roll up the balances from all token\naccounts of the same token mint into a single balance for the user to shield the\nuser from this complexity."),(0,l.kt)("p",null,"See the ",(0,l.kt)("a",{parentName:"p",href:"#garbage-collecting-ancillary-token-accounts"},"Garbage Collecting Ancillary Token Accounts"),"\nsection for suggestions on how the wallet should clean up ancillary token accounts on the user's behalf."),(0,l.kt)("h3",{id:"associated-token-account"},"Associated Token Account"),(0,l.kt)("p",null,"Before the user can receive tokens, their associated token account must be created\non-chain, requiring a small amount of SOL to mark the account as rent-exempt."),(0,l.kt)("p",null,"There's no restriction on who can create a user's associated token account.  It\ncould either be created by the wallet on behalf of the user or funded by a 3rd\nparty through an airdrop campaign."),(0,l.kt)("p",null,"The creation process is described ",(0,l.kt)("a",{parentName:"p",href:"/solana-program-library/spl/associated-token-account"},"here"),"."),(0,l.kt)("p",null,"It's highly recommended that the wallet create the associated token account for\na given SPL Token itself before indicating to the user that they are able to\nreceive that SPL Tokens type (typically done by showing the user their receiving\naddress). A wallet that chooses to not perform this step may limit its user's ability\nto receive SPL Tokens from other wallets."),(0,l.kt)("h4",{id:"sample-add-token-workflow"},'Sample "Add Token" workflow'),(0,l.kt)("p",null,"The user should first fund their associated token account when they want to\nreceive SPL Tokens of a certain type to:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Maximize interoperability with other wallet implementations"),(0,l.kt)("li",{parentName:"ol"},"Avoid pushing the cost of creating their associated token account on the first sender")),(0,l.kt)("p",null,'The wallet should provide a UI that allow the users to "add a token".\nThe user selects the kind of token, and is presented with information about how\nmuch SOL it will cost to add the token.'),(0,l.kt)("p",null,"Upon confirmation, the wallet creates the associated token type as the described\n",(0,l.kt)("a",{parentName:"p",href:"/solana-program-library/spl/associated-token-account"},"here"),"."),(0,l.kt)("h4",{id:"sample-airdrop-campaign-workflow"},'Sample "Airdrop campaign" workflow'),(0,l.kt)("p",null,"For each recipient wallet addresses, send a transaction containing:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Create the associated token account on the recipient's behalf."),(0,l.kt)("li",{parentName:"ol"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"TokenInstruction::Transfer")," to complete the transfer")),(0,l.kt)("h4",{id:"associated-token-account-ownership"},"Associated Token Account Ownership"),(0,l.kt)("p",null,"\u26a0\ufe0f The wallet should never use ",(0,l.kt)("inlineCode",{parentName:"p"},"TokenInstruction::SetAuthority")," to set the\n",(0,l.kt)("inlineCode",{parentName:"p"},"AccountOwner")," authority of the associated token account to another address."),(0,l.kt)("h3",{id:"ancillary-token-accounts"},"Ancillary Token Accounts"),(0,l.kt)("p",null,"At any time ownership of an existing SPL Token account may be assigned to the\nuser.  One way to accomplish this is with the\n",(0,l.kt)("inlineCode",{parentName:"p"},"spl-token authorize <TOKEN_ADDRESS> owner <USER_ADDRESS>")," command.  Wallets\nshould be prepared to gracefully manage token accounts that they themselves did\nnot create for the user."),(0,l.kt)("h3",{id:"transferring-tokens-between-wallets"},"Transferring Tokens Between Wallets"),(0,l.kt)("p",null,"The preferred method of transferring tokens between wallets is to transfer into\nassociated token account of the recipient."),(0,l.kt)("p",null,"The recipient must provide their main wallet address to the sender.  The sender\nthen:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Derives the associated token account for the recipient"),(0,l.kt)("li",{parentName:"ol"},"Fetches the recipient's associated token account over RPC and checks that it exists"),(0,l.kt)("li",{parentName:"ol"},"If the recipient's associated token account does not yet exist, the sender\nwallet should create the recipient's associated token account as described\n",(0,l.kt)("a",{parentName:"li",href:"/solana-program-library/spl/associated-token-account"},"here"),".\nThe sender's wallet may choose to inform the user that as a result of account\ncreation the transfer will require more SOL than normal.\nHowever a wallet that chooses to not support creating the recipient's\nassociated token account at this time should present a message to the user with enough\ninformation to permit them to find a workaround (such as transferring the\ntoken through a fully compliant intermediary wallet such as ",(0,l.kt)("a",{parentName:"li",href:"https://sollet.io"},"https://sollet.io"),")\nto allow the users to accomplish their goal"),(0,l.kt)("li",{parentName:"ol"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"TokenInstruction::Transfer")," to complete the transfer")),(0,l.kt)("p",null,"The sender's wallet must not require that the recipient's main wallet address\nhold a balance before allowing the transfer."),(0,l.kt)("h3",{id:"registry-for-token-details"},"Registry for token details"),(0,l.kt)("p",null,"At the moment there exist two solutions for Token Mint registries:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"hard coded addresses in the wallet or dapp"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@solana/spl-token-registry"},"spl-token-registry"),"\npackage, maintained at ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/solana-labs/token-list"},"https://github.com/solana-labs/token-list"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"A decentralized solution is in progress.")),(0,l.kt)("h3",{id:"garbage-collecting-ancillary-token-accounts"},"Garbage Collecting Ancillary Token Accounts"),(0,l.kt)("p",null,"Wallets should empty ancillary token accounts as quickly as practical by\ntransferring into the user's associated token account.  This effort serves two\npurposes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If the user is the close authority for the ancillary account, the wallet can\nreclaim SOL for the user by closing the account."),(0,l.kt)("li",{parentName:"ul"},"If the ancillary account was funded by a 3rd party, once the account is\nemptied that 3rd party may close the account and reclaim the SOL.")),(0,l.kt)("p",null,"One natural time to garbage collect ancillary token accounts is when the user\nnext sends tokens.  The additional instructions to do so can be added to the\nexisting transaction, and will not require an additional fee."),(0,l.kt)("p",null,"Cleanup Pseudo Steps:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"For all non-empty ancillary token accounts, add a\n",(0,l.kt)("inlineCode",{parentName:"li"},"TokenInstruction::Transfer")," instruction to the transfer the full token\namount to the user's associated token account."),(0,l.kt)("li",{parentName:"ol"},"For all empty ancillary token accounts where the user is the close authority,\nadd a ",(0,l.kt)("inlineCode",{parentName:"li"},"TokenInstruction::CloseAccount")," instruction")),(0,l.kt)("p",null,"If adding one or more of clean up instructions cause the transaction to exceed\nthe maximum allowed transaction size, remove those extra clean up instructions.\nThey can be cleaned up during the next send operation."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"spl-token gc")," command provides an example implementation of this cleanup process."),(0,l.kt)("h3",{id:"token-vesting-contract"},"Token Vesting Contract:"),(0,l.kt)("p",null,"This program allows you to lock arbitrary SPL tokens and release the locked tokens with a determined unlock schedule. An ",(0,l.kt)("inlineCode",{parentName:"p"},"unlock schedule")," is made of a ",(0,l.kt)("inlineCode",{parentName:"p"},"unix timestamp")," and a token ",(0,l.kt)("inlineCode",{parentName:"p"},"amount"),", when initializing a vesting contract, the creator can pass an array of ",(0,l.kt)("inlineCode",{parentName:"p"},"unlock schedule")," with an arbitrary size giving the creator of the contract complete control of how the tokens unlock over time."),(0,l.kt)("p",null,"Unlocking works by pushing a permissionless crank on the contract that moves the tokens to the pre-specified address. The recipient address of a vesting contract can be modified by the owner of the current recipient key, meaning that vesting contract locked tokens can be traded."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Code: ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/Bonfida/token-vesting"},"https://github.com/Bonfida/token-vesting")),(0,l.kt)("li",{parentName:"ul"},"UI: ",(0,l.kt)("a",{parentName:"li",href:"https://vesting.bonfida.com/#/"},"https://vesting.bonfida.com/#/")),(0,l.kt)("li",{parentName:"ul"},"Audit: The audit was conducted by Kudelski, the report can be found ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/Bonfida/token-vesting/blob/master/audit/Bonfida_SecurityAssessment_Vesting_Final050521.pdf"},"here"))))}N.isMDXComponent=!0}}]);