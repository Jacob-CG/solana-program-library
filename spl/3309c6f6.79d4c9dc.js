(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{144:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var a=n(2),r=n(9),i=(n(0),n(155)),o={title:"Name Service"},s={id:"name-service",isDocsHomePage:!1,title:"Name Service",description:"A SPL program for issuing and managing ownership of: domain names, Solana Pubkeys, URLs, Twitter handles, ipfs cid's etc..",source:"@site/src/name-service.md",permalink:"/solana-program-library/spl/name-service",sidebar:"docs",previous:{title:"Memo Program",permalink:"/solana-program-library/spl/memo"},next:{title:"Shared memory Program",permalink:"/solana-program-library/spl/shared-memory"}},l=[],c={rightToc:l};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"A SPL program for issuing and managing ownership of: domain names, Solana Pubkeys, URLs, Twitter handles, ipfs cid's etc.."),Object(i.b)("p",null,"This program could be used for dns, pubkey etc lookups via a browser extension\nfor example, the goal is to create an easy way to identify Solana public keys\nwith various links."),Object(i.b)("p",null,"Broader use cases are also imaginable."),Object(i.b)("p",null,"Key points:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A Name is a string that maps to a record (program derived account) which can hold data."),Object(i.b)("li",{parentName:"ul"},"Each name is of a certain class and has a certain owner, both are identified\nby their pubkeys. The class of a name needs to sign the issuance of it."),Object(i.b)("li",{parentName:"ul"},"A name can have a parent name that is identified by the address of its record.\nThe owner of the parent name (when it exists) needs to sign the issuance of\nthe child name."),Object(i.b)("li",{parentName:"ul"},"The data of a name registry is controlled by the class keypair or, when it is\nset to ",Object(i.b)("inlineCode",{parentName:"li"},"Pubkey::default()"),", by the name owner keypair."),Object(i.b)("li",{parentName:"ul"},"Only the owner can delete a name registry.")),Object(i.b)("p",null,"Remarks and use cases:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Domain name declarations: One could arbitrarily set-up a class that we can call\nTop-Level-Domain names. Names in this class can only be issued with the\npermission of the class keypair, ie the administrator, who can enforce that\nTLD names are of the type ",Object(i.b)("inlineCode",{parentName:"li"},'".something"'),". From then on one could create and\nown the TLD ",Object(i.b)("inlineCode",{parentName:"li"},'".sol"'),' and create a class of ".sol" sub-domains, administrating\nthe issuance of the ',Object(i.b)("inlineCode",{parentName:"li"},'"something.sol"')," sub-domains that way (by setting the\nparent name to the address of the ",Object(i.b)("inlineCode",{parentName:"li"},'".sol"')," registry).")),Object(i.b)("p",null,"An off-chain browser extension could then, similarly to DNS, parse the user SPL\nname service URL input and descend the chain of names, verifying that the names\nexist with the correct parenthood, and finally use the data of the last child\nname (or also a combination of the parents data) in order to resolve this call\ntowards a real DNS URL or any kind of data."),Object(i.b)("p",null,"Although the ownership and class system makes the administration a given class\ncentralized, the creation of new classes is permissionless and as a class owner\nany kind of decentralized governance signing program could be used."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Twitter handles can be added as names of one specific name class. The class\nauthority of will therefore hold the right to add a Twitter handle name. This\nenables the verification of Twitter accounts for example by asking the user to\ntweet his pubkey or a signed message. A bot that holds the private issuing\nauthority key can then sign the Create instruction (with a metadata_authority\nthat is the tweeted pubkey) and send it back to the user who will then submit\nit to the program.\nIn this case the class will still be able to control the data of the name registry, and not the user for example.")),Object(i.b)("p",null,"Therefore, another way of using this program would be to create a name\n(",Object(i.b)("inlineCode",{parentName:"p"},'"verified-twitter-handles"')," for example) with the ",Object(i.b)("inlineCode",{parentName:"p"},"Pubkey::default()")," class\nand with the owner being the authority. That way verified Twitter names could be\nissued as child names of this parent by the owner, leaving the user as being\nable to modify the data of his Twitter name registry."))}u.isMDXComponent=!0},155:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),p=a,h=d["".concat(o,".").concat(p)]||d[p]||m[p]||i;return n?r.a.createElement(h,s(s({ref:t},c),{},{components:n})):r.a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);